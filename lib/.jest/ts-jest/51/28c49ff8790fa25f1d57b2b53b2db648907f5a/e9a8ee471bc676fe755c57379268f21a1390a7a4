[["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/test/AMQPModuleTest.ts",{"fileContent":"import { AMQPService, AMQPModule, AMQPLogLevel, AMQPConnectionStatus, AMQPMessage } from '../dist';\nimport { TestingModule, Test } from '@nestjs/testing';\nimport { ConsumeMessage } from 'amqplib';\n\njest.setTimeout(15000);\n\ndescribe('AMQPModule Test', () => {\n\n    let app;\n    let amqpService: AMQPService;\n\n    test('asdf', async () => {\n\n        const module: TestingModule = await Test.createTestingModule({\n\n            imports: [\n\n                AMQPModule.forRoot({\n\n                    logLevel: AMQPLogLevel.ERROR,\n                    connections: [\n\n                        {\n\n                            name: 'one',\n                            url: 'amqp://rabbitmq:agaeq14@localhost:5672',\n                            exchange: {\n\n                                name: 'test-1',\n                                type: 'topic',\n                                options: {\n\n                                    durable: true\n\n                                }\n\n                            },\n                            queues: [\n\n                                {\n\n                                    name: '1',\n                                    routingKey: '111',\n                                    createBindings: true,\n                                    options: {\n\n                                        durable: false\n\n                                    }\n\n                                }\n\n                            ]\n\n                        }, {\n\n                            name: 'two',\n                            url: 'amqp://rabbitmq:agaeq14@localhost:5672',\n                            exchange: {\n\n                                name: 'test-2',\n                                type: 'topic',\n                                options: {\n\n                                    durable: true\n\n                                }\n\n                            },\n                            queues: [\n\n                                {\n\n                                    name: '2',\n                                    routingKey: '222',\n                                    createBindings: true,\n                                    options: {\n\n                                        durable: false\n\n                                    }\n\n                                }\n\n                            ]\n\n                        }\n\n                    ]\n\n                })\n\n            ]\n\n        }).compile();\n\n        app = module.createNestApplication();\n\n        await app.init();\n\n        amqpService = module.get<AMQPService>(AMQPService);\n\n        await expect(amqpService.connections[ 0 ].config).toBeTruthy();\n\n\n        await expect(amqpService.connections.length).toEqual(2);\n\n        amqpService.getConnection('two').subscribe(async connection => {\n\n            await expect(connection.status).toEqual(AMQPConnectionStatus.DISCONNECTED);\n\n        });\n\n\n        return new Promise<void>(resolve => {\n\n            expect(1).toEqual(1);\n\n            resolve();\n\n        });\n\n    });\n\n    test('Publish Message', async () => {\n\n        return new Promise<void>(resolve => {\n\n            amqpService.getConnection('two').subscribe(connection => {\n\n                connection.queue.publish({ exchange: 'test-1', message: Buffer.from('a'), routingKey: '1' });\n\n                expect(connection.config).toBeTruthy();\n\n                resolve();\n\n            });\n\n        });\n\n    });\n\n    test('AMQPMessage', () => {\n\n        const message = new AMQPMessage({\n\n            content: Buffer.from(JSON.stringify({ a: 1, b: 2 }))\n\n        } as ConsumeMessage);\n\n        return expect(message.fromJSON()).toBeTruthy();\n\n    });\n\n    afterAll(async () => {\n\n        amqpService.disconnect();\n\n        await app.close();\n\n        return new Promise<void>(resolve => {\n\n            setTimeout(() => {\n\n                resolve();\n\n            }, 1000);\n\n        });\n\n    });\n\n});\n","resolvedModuleNames":["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/index.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/connections/AMQPConnection.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/connections/AMQPConnectionStatus.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/AMQPModule.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/AMQPQueueOptions.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/AMQPReference.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/AMQPService.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/configuration/AMQPConfig.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/configuration/AMQPConfigConnection.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/configuration/AMQPConfigExchange.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/configuration/AMQPConfigQueue.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/exceptions/AMQPConnectionNotFoundException.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/exceptions/AMQPPublishException.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/logging/AMQPLogEmoji.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/logging/AMQPLogger.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/logging/AMQPLogLevel.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/queueing/AMQPMessage.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/queueing/AMQPQueue.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/queueing/AMQPQueueMessage.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/queueing/AMQPRPCCall.d.ts","/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/dist/queueing/AMQPSubscriber.d.ts"]}]]