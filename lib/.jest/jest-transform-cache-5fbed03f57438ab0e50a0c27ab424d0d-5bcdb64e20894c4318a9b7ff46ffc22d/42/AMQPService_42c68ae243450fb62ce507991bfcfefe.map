{"version":3,"sources":["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/AMQPService.ts"],"names":[],"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","sourcesContent":["import { Injectable, Inject, OnModuleDestroy } from '@nestjs/common';\nimport { AMQPConnection } from './AMQPConnection';\nimport { AMQPConfig } from './configuration/AMQPConfig';\nimport { AMQPConnectionNotFoundException } from './exceptions/AMQPConnectionNotFoundException';\nimport { ReplaySubject, forkJoin, Observable } from 'rxjs';\nimport { AMQPLogger } from './logging/AMQPLogger';\nimport * as chalk from 'chalk';\nimport { AMQPConfigConnection } from './configuration/AMQPConfigConnection';\nimport { AMQPLogEmoji } from './logging/AMQPLogEmoji';\n\n@Injectable()\nexport class AMQPService implements OnModuleDestroy {\n\n    public config: AMQPConfig;\n\n    private connections: Array<AMQPConnection> = [];\n\n    public constructor(@Inject('AMQP_CONFIG') config: AMQPConfig, private readonly logger: AMQPLogger) {\n\n        this.config = config;\n        this.logger.config = config;\n\n        this.connect();\n\n    }\n\n    public connect() {\n\n        this.logger.debug('Creating connections..', AMQPLogEmoji.NEW, 'SERVICE MANAGER');\n\n        if (this.connections.length === 0) {\n\n            for (let i = 0; i < this.config.connections.length; i++) {\n\n                this.addConnection(this.config.connections[ i ]);\n\n            }\n\n        } else {\n\n            for (let i = 0; i < this.connections.length; i++) {\n\n                this.connections[ i ].connect();\n\n            }\n\n        }\n\n    }\n\n    public disconnect(): void {\n\n        for (let i = 0; i < this.connections.length; i++) {\n\n            this.logger.debug(`Disconnecting from amqp server \"${ chalk.yellowBright(this.connections[ i ].config.name ? this.connections[ i ].config.name : '#0') }\"`, AMQPLogEmoji.DISCONNECT, 'SERVICE MANAGER');\n\n            this.connections[ i ].disconnect();\n\n        }\n\n        this.logger.debug('All connections have been disconnected!', AMQPLogEmoji.DISCONNECT, 'SERVICE MANAGER');\n\n    }\n\n    public tearDown(): Observable<Array<unknown>> {\n\n        return forkJoin(this.connections.map(connection => connection.tearDown()));\n\n    }\n\n    public addConnection(config: AMQPConfigConnection): AMQPConnection {\n\n        this.logger.debug(`Creating connection to amqp server \"${ chalk.yellowBright(config.name ? config.name : '#0') }\"`, AMQPLogEmoji.NEW, 'SERVICE MANAGER');\n\n        const connection = new AMQPConnection(config, this.logger);\n\n        this.connections.push(connection);\n\n        return connection;\n\n    }\n\n    public getConnection(name?: string): ReplaySubject<AMQPConnection> {\n\n        this.logger.trace(`Attempting to get connection \"${ chalk.yellowBright(name ? name : '#0') }\"`, AMQPLogEmoji.NEW, 'SERVICE MANAGER');\n\n        const subject$: ReplaySubject<AMQPConnection> = new ReplaySubject();\n\n        if (name) {\n\n            const connection = this.connections.find(connection => connection.config.name === name);\n\n            if (connection) {\n\n                this.logger.trace(`Retrieved connection \"${ chalk.yellowBright(connection.config.name) }\"!`, AMQPLogEmoji.SUCCESS, 'SERVICE MANAGER');\n\n                subject$.next(connection);\n\n            } else {\n\n                throw new AMQPConnectionNotFoundException(`There is no existing connection named \"${ chalk.yellowBright(name) }\".`);\n\n            }\n\n        } else {\n\n            if (this.connections && this.connections.length > 0) {\n\n                this.logger.trace(`Retrieved connection ${ chalk.yellowBright('#0!') }`, AMQPLogEmoji.SUCCESS, 'SERVICE MANAGER');\n\n                subject$.next(this.connections[ 0 ]);\n\n            } else {\n\n                throw new AMQPConnectionNotFoundException('There are no connections.');\n\n            }\n\n        }\n\n        return subject$;\n\n    }\n\n    public onModuleDestroy(): void {\n\n        this.logger.debug(chalk.magentaBright('Received shutdown signal, shutting down..'), AMQPLogEmoji.SUCCESS, 'SERVICE MANAGER');\n\n        this.disconnect();\n\n    }\n\n}\n"]}