8a463627373ed9b280937949bce2c326
"use strict";

/* istanbul ignore next */
function cov_rymh2u0q2() {
  var path = "/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/logging/AMQPLogLevel.ts";
  var hash = "1aa3b25154a14132dc4f0dfb6808475db4cd05d4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/logging/AMQPLogLevel.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 71
        }
      },
      "3": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "5": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 1
          },
          end: {
            line: 5,
            column: 2
          }
        },
        loc: {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 10,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 10,
            column: 38
          }
        }, {
          start: {
            line: 10,
            column: 43
          },
          end: {
            line: 10,
            column: 68
          }
        }],
        line: 10
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/logging/AMQPLogLevel.ts",
      mappings: ";;;AAAA,IAAY,YAOX;AAPD,WAAY,YAAY;IAEpB,iDAAS,CAAA;IACT,+CAAQ,CAAA;IACR,iDAAS,CAAA;IACT,iDAAS,CAAA;AAEb,CAAC,EAPW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAOvB",
      names: [],
      sources: ["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/logging/AMQPLogLevel.ts"],
      sourcesContent: ["export enum AMQPLogLevel {\n\n    ERROR = 0,\n    INFO = 1,\n    DEBUG = 2,\n    TRACE = 3\n    \n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1aa3b25154a14132dc4f0dfb6808475db4cd05d4"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rymh2u0q2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_rymh2u0q2();
cov_rymh2u0q2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_rymh2u0q2().s[1]++;
exports.AMQPLogLevel = void 0;
var AMQPLogLevel;

/* istanbul ignore next */
cov_rymh2u0q2().s[2]++;

(function (AMQPLogLevel) {
  /* istanbul ignore next */
  cov_rymh2u0q2().f[0]++;
  cov_rymh2u0q2().s[3]++;
  AMQPLogLevel[AMQPLogLevel["ERROR"] = 0] = "ERROR";

  /* istanbul ignore next */
  cov_rymh2u0q2().s[4]++;
  AMQPLogLevel[AMQPLogLevel["INFO"] = 1] = "INFO";

  /* istanbul ignore next */
  cov_rymh2u0q2().s[5]++;
  AMQPLogLevel[AMQPLogLevel["DEBUG"] = 2] = "DEBUG";

  /* istanbul ignore next */
  cov_rymh2u0q2().s[6]++;
  AMQPLogLevel[AMQPLogLevel["TRACE"] = 3] = "TRACE";
})(AMQPLogLevel =
/* istanbul ignore next */
(cov_rymh2u0q2().b[0][0]++, exports.AMQPLogLevel) ||
/* istanbul ignore next */
(cov_rymh2u0q2().b[0][1]++, exports.AMQPLogLevel = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3ZGF2aXMvd29ya3NwYWNlL25lc3Rqc3Byby9tb2R1bGVzL2FtcXAvbGliL3NyYy9sb2dnaW5nL0FNUVBMb2dMZXZlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQVksWUFBWjs7Ozs7QUFBQSxDQUFBLFVBQVksWUFBWixFQUF3QjtBQUFBO0FBQUE7QUFBQTtBQUVwQixFQUFBLFlBQUEsQ0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQTs7QUFGb0I7QUFBQTtBQUdwQixFQUFBLFlBQUEsQ0FBQSxZQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsTUFBQTs7QUFIb0I7QUFBQTtBQUlwQixFQUFBLFlBQUEsQ0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQTs7QUFKb0I7QUFBQTtBQUtwQixFQUFBLFlBQUEsQ0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsT0FBQTtBQUVILENBUEQsRUFBWSxZQUFZO0FBQVo7QUFBQSw0QkFBQSxPQUFBLENBQUEsWUFBQTtBQUFBO0FBQUEsNEJBQUEsT0FBQSxDQUFBLFlBQUEsR0FBWSxFQUFaLENBQVoiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBBTVFQTG9nTGV2ZWwge1xuXG4gICAgRVJST1IgPSAwLFxuICAgIElORk8gPSAxLFxuICAgIERFQlVHID0gMixcbiAgICBUUkFDRSA9IDNcbiAgICBcbn1cbiJdfQ==