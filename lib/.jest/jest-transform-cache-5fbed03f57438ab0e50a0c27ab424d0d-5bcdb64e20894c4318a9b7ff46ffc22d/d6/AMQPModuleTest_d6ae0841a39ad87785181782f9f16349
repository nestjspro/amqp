e2d37f5417edbf4dcda1a6b7df119deb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dist_1 = require("../dist");
const testing_1 = require("@nestjs/testing");
jest.setTimeout(15000);
describe('AMQPModule Test', () => {
    let app;
    let amqpService;
    let c;
    test('asdf', async () => {
        const module = await testing_1.Test.createTestingModule({
            imports: [
                dist_1.AMQPModule.forRoot({
                    logLevel: dist_1.AMQPLogLevel.ERROR,
                    connections: [
                        {
                            name: 'one',
                            url: 'amqp://rabbitmq:agaeq14@localhost:5672',
                            exchange: {
                                name: 'test-1',
                                type: 'topic',
                                options: {
                                    durable: true
                                }
                            },
                            queues: [
                                {
                                    name: '1',
                                    routingKey: '111',
                                    createBindings: true,
                                    options: {
                                        durable: false
                                    }
                                }
                            ]
                        }, {
                            name: 'two',
                            url: 'amqp://rabbitmq:agaeq14@localhost:5672',
                            exchange: {
                                name: 'test-2',
                                type: 'topic',
                                options: {
                                    durable: true
                                }
                            },
                            queues: [
                                {
                                    name: '2',
                                    routingKey: '222',
                                    createBindings: true,
                                    options: {
                                        durable: false
                                    }
                                }
                            ]
                        }
                    ]
                })
            ]
        }).compile();
        app = module.createNestApplication();
        await app.init();
        amqpService = module.get(dist_1.AMQPService);
        await expect(amqpService.connections[0].config).toBeTruthy();
        await expect(amqpService.connections.length).toEqual(2);
        amqpService.getConnection('two').subscribe(async (connection) => {
            await expect(connection.status).toEqual(dist_1.AMQPConnectionStatus.DISCONNECTED);
        });
        return new Promise(resolve => {
            expect(1).toEqual(1);
            resolve();
        });
        //
        // service.connections[ 0 ].reference$.subscribe(reference => {
        //     console.log(3);
        //     console.log(reference);
        //
        // });
        // console.log(4);
        // console.log(service.connections);
        // await publisher.connect();
        //
        // const channel = await publisher.amqp.createChannel();
        // console.log(channel);
        // console.log(await channel.assertExchange('test-2', 'topic'));
        //
        // await app.close();
    });
    test('Publish Message', async () => {
        return new Promise(resolve => {
            amqpService.getConnection('two').subscribe(connection => {
                c = connection;
                connection.queue.publish({ exchange: 'test-1', message: Buffer.from('a'), routingKey: '1' });
                expect(connection.config).toBeTruthy();
                resolve();
            });
        });
    });
    test('AMQPMessage', () => {
        const message = new dist_1.AMQPMessage({
            content: Buffer.from(JSON.stringify({ a: 1, b: 2 }))
        });
        return expect(message.fromJSON()).toBeTruthy();
    });
    afterAll(async () => {
        amqpService.disconnect();
        await app.close();
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, 1000);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hdHRoZXdkYXZpcy93b3Jrc3BhY2UvbmVzdGpzcHJvL21vZHVsZXMvYW1xcC9saWIvdGVzdC9BTVFQTW9kdWxlVGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFtSDtBQUNuSCw2Q0FBc0Q7QUFHdEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUV2QixRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBRTdCLElBQUksR0FBRyxDQUFDO0lBQ1IsSUFBSSxXQUF3QixDQUFDO0lBQzdCLElBQUksQ0FBaUIsQ0FBQztJQUV0QixJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBRXBCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUV6RCxPQUFPLEVBQUU7Z0JBRUwsaUJBQVUsQ0FBQyxPQUFPLENBQUM7b0JBRWYsUUFBUSxFQUFFLG1CQUFZLENBQUMsS0FBSztvQkFDNUIsV0FBVyxFQUFFO3dCQUVUOzRCQUVJLElBQUksRUFBRSxLQUFLOzRCQUNYLEdBQUcsRUFBRSx3Q0FBd0M7NEJBQzdDLFFBQVEsRUFBRTtnQ0FFTixJQUFJLEVBQUUsUUFBUTtnQ0FDZCxJQUFJLEVBQUUsT0FBTztnQ0FDYixPQUFPLEVBQUU7b0NBRUwsT0FBTyxFQUFFLElBQUk7aUNBRWhCOzZCQUVKOzRCQUNELE1BQU0sRUFBRTtnQ0FFSjtvQ0FFSSxJQUFJLEVBQUUsR0FBRztvQ0FDVCxVQUFVLEVBQUUsS0FBSztvQ0FDakIsY0FBYyxFQUFFLElBQUk7b0NBQ3BCLE9BQU8sRUFBRTt3Q0FFTCxPQUFPLEVBQUUsS0FBSztxQ0FFakI7aUNBRUo7NkJBRUo7eUJBRUosRUFBRTs0QkFFQyxJQUFJLEVBQUUsS0FBSzs0QkFDWCxHQUFHLEVBQUUsd0NBQXdDOzRCQUM3QyxRQUFRLEVBQUU7Z0NBRU4sSUFBSSxFQUFFLFFBQVE7Z0NBQ2QsSUFBSSxFQUFFLE9BQU87Z0NBQ2IsT0FBTyxFQUFFO29DQUVMLE9BQU8sRUFB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RTtRQUVoQixXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFekIsTUFBTSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFbEIsT0FBTyxJQUFJLE9BQU8sQ0FBTyxPQUFPLENBQUMsRUFBRTtZQUUvQixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUVaLE9BQU8sRUFBRSxDQUFDO1lBRWQsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWIsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3ZGF2aXMvd29ya3NwYWNlL25lc3Rqc3Byby9tb2R1bGVzL2FtcXAvbGliL3Rlc3QvQU1RUE1vZHVsZVRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQU1RUFNlcnZpY2UsIEFNUVBNb2R1bGUsIEFNUVBMb2dMZXZlbCwgQU1RUENvbm5lY3Rpb25TdGF0dXMsIEFNUVBDb25uZWN0aW9uLCBBTVFQTWVzc2FnZSB9IGZyb20gJy4uL2Rpc3QnO1xuaW1wb3J0IHsgVGVzdGluZ01vZHVsZSwgVGVzdCB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBDb25zdW1lTWVzc2FnZSB9IGZyb20gJ2FtcXBsaWInO1xuXG5qZXN0LnNldFRpbWVvdXQoMTUwMDApO1xuXG5kZXNjcmliZSgnQU1RUE1vZHVsZSBUZXN0JywgKCkgPT4ge1xuXG4gICAgbGV0IGFwcDtcbiAgICBsZXQgYW1xcFNlcnZpY2U6IEFNUVBTZXJ2aWNlO1xuICAgIGxldCBjOiBBTVFQQ29ubmVjdGlvbjtcblxuICAgIHRlc3QoJ2FzZGYnLCBhc3luYyAoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcblxuICAgICAgICAgICAgaW1wb3J0czogW1xuXG4gICAgICAgICAgICAgICAgQU1RUE1vZHVsZS5mb3JSb290KHtcblxuICAgICAgICAgICAgICAgICAgICBsb2dMZXZlbDogQU1RUExvZ0xldmVsLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uczogW1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnb25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdhbXFwOi8vcmFiYml0bXE6YWdhZXExNEBsb2NhbGhvc3Q6NTY3MicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2U6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndGVzdC0xJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RvcGljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhYmxlOiB0cnVlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZXM6IFtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICcxJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRpbmdLZXk6ICcxMTEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZ3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhYmxlOiBmYWxzZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndHdvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdhbXFwOi8vcmFiYml0bXE6YWdhZXExNEBsb2NhbGhvc3Q6NTY3MicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2U6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndGVzdC0yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RvcGljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhYmxlOiB0cnVlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZXM6IFtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICcyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRpbmdLZXk6ICcyMjInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmluZGluZ3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhYmxlOiBmYWxzZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgXVxuXG4gICAgICAgIH0pLmNvbXBpbGUoKTtcblxuICAgICAgICBhcHAgPSBtb2R1bGUuY3JlYXRlTmVzdEFwcGxpY2F0aW9uKCk7XG5cbiAgICAgICAgYXdhaXQgYXBwLmluaXQoKTtcblxuICAgICAgICBhbXFwU2VydmljZSA9IG1vZHVsZS5nZXQ8QU1RUFNlcnZpY2U+KEFNUVBTZXJ2aWNlKTtcblxuICAgICAgICBhd2FpdCBleHBlY3QoYW1xcFNlcnZpY2UuY29ubmVjdGlvbnNbIDAgXS5jb25maWcpLnRvQmVUcnV0aHkoKTtcblxuXG4gICAgICAgIGF3YWl0IGV4cGVjdChhbXFwU2VydmljZS5jb25uZWN0aW9ucy5sZW5ndGgpLnRvRXF1YWwoMik7XG5cbiAgICAgICAgYW1xcFNlcnZpY2UuZ2V0Q29ubmVjdGlvbigndHdvJykuc3Vic2NyaWJlKGFzeW5jIGNvbm5lY3Rpb24gPT4ge1xuXG4gICAgICAgICAgICBhd2FpdCBleHBlY3QoY29ubmVjdGlvbi5zdGF0dXMpLnRvRXF1YWwoQU1RUENvbm5lY3Rpb25TdGF0dXMuRElTQ09OTkVDVEVEKTtcblxuICAgICAgICB9KTtcblxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcblxuICAgICAgICAgICAgZXhwZWN0KDEpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgIHJlc29sdmUoKTtcblxuICAgICAgICB9KTtcblxuICAgICAgICAvL1xuICAgICAgICAvLyBzZXJ2aWNlLmNvbm5lY3Rpb25zWyAwIF0ucmVmZXJlbmNlJC5zdWJzY3JpYmUocmVmZXJlbmNlID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKDMpO1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2cocmVmZXJlbmNlKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKDQpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhzZXJ2aWNlLmNvbm5lY3Rpb25zKTtcbiAgICAgICAgLy8gYXdhaXQgcHVibGlzaGVyLmNvbm5lY3QoKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gY29uc3QgY2hhbm5lbCA9IGF3YWl0IHB1Ymxpc2hlci5hbXFwLmNyZWF0ZUNoYW5uZWwoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coY2hhbm5lbCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGF3YWl0IGNoYW5uZWwuYXNzZXJ0RXhjaGFuZ2UoJ3Rlc3QtMicsICd0b3BpYycpKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gYXdhaXQgYXBwLmNsb3NlKCk7XG5cblxuICAgIH0pO1xuXG4gICAgdGVzdCgnUHVibGlzaCBNZXNzYWdlJywgYXN5bmMgKCkgPT4ge1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcblxuICAgICAgICAgICAgYW1xcFNlcnZpY2UuZ2V0Q29ubmVjdGlvbigndHdvJykuc3Vic2NyaWJlKGNvbm5lY3Rpb24gPT4ge1xuXG4gICAgICAgICAgICAgICAgYyA9IGNvbm5lY3Rpb247XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5xdWV1ZS5wdWJsaXNoKHsgZXhjaGFuZ2U6ICd0ZXN0LTEnLCBtZXNzYWdlOiBCdWZmZXIuZnJvbSgnYScpLCByb3V0aW5nS2V5OiAnMScgfSk7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QoY29ubmVjdGlvbi5jb25maWcpLnRvQmVUcnV0aHkoKTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuICAgIHRlc3QoJ0FNUVBNZXNzYWdlJywgKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgQU1RUE1lc3NhZ2Uoe1xuICAgICAgICAgICAgY29udGVudDogQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoeyBhOiAxLCBiOiAyIH0pKVxuICAgICAgICB9IGFzIENvbnN1bWVNZXNzYWdlKTtcblxuICAgICAgICByZXR1cm4gZXhwZWN0KG1lc3NhZ2UuZnJvbUpTT04oKSkudG9CZVRydXRoeSgpO1xuXG4gICAgfSk7XG5cbiAgICBhZnRlckFsbChhc3luYyAoKSA9PiB7XG5cbiAgICAgICAgYW1xcFNlcnZpY2UuZGlzY29ubmVjdCgpO1xuXG4gICAgICAgIGF3YWl0IGFwcC5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXNvbHZlID0+IHtcblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG5cbiAgICAgICAgICAgIH0sIDEwMDApO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbn0pO1xuIl0sInZlcnNpb24iOjN9