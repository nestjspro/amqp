{"file":"/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/test/AMQPModuleTest.ts","mappings":"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","names":[],"sources":["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/test/AMQPModuleTest.ts"],"sourcesContent":["import { AMQPService, AMQPModule, AMQPLogLevel, AMQPConnectionStatus, AMQPConnection, AMQPMessage } from '../dist';\nimport { TestingModule, Test } from '@nestjs/testing';\nimport { ConsumeMessage } from 'amqplib';\n\njest.setTimeout(15000);\n\ndescribe('AMQPModule Test', () => {\n\n    let app;\n    let amqpService: AMQPService;\n    let c: AMQPConnection;\n\n    test('asdf', async () => {\n\n        const module: TestingModule = await Test.createTestingModule({\n\n            imports: [\n\n                AMQPModule.forRoot({\n\n                    logLevel: AMQPLogLevel.ERROR,\n                    connections: [\n\n                        {\n\n                            name: 'one',\n                            url: 'amqp://rabbitmq:agaeq14@localhost:5672',\n                            exchange: {\n\n                                name: 'test-1',\n                                type: 'topic',\n                                options: {\n\n                                    durable: true\n\n                                }\n\n                            },\n                            queues: [\n\n                                {\n\n                                    name: '1',\n                                    routingKey: '111',\n                                    createBindings: true,\n                                    options: {\n\n                                        durable: false\n\n                                    }\n\n                                }\n\n                            ]\n\n                        }, {\n\n                            name: 'two',\n                            url: 'amqp://rabbitmq:agaeq14@localhost:5672',\n                            exchange: {\n\n                                name: 'test-2',\n                                type: 'topic',\n                                options: {\n\n                                    durable: true\n\n                                }\n\n                            },\n                            queues: [\n\n                                {\n\n                                    name: '2',\n                                    routingKey: '222',\n                                    createBindings: true,\n                                    options: {\n\n                                        durable: false\n\n                                    }\n\n                                }\n\n                            ]\n\n                        }\n\n                    ]\n\n                })\n\n            ]\n\n        }).compile();\n\n        app = module.createNestApplication();\n\n        await app.init();\n\n        amqpService = module.get<AMQPService>(AMQPService);\n\n        await expect(amqpService.connections[ 0 ].config).toBeTruthy();\n\n\n        await expect(amqpService.connections.length).toEqual(2);\n\n        amqpService.getConnection('two').subscribe(async connection => {\n\n            await expect(connection.status).toEqual(AMQPConnectionStatus.DISCONNECTED);\n\n        });\n\n\n        return new Promise<void>(resolve => {\n\n            expect(1).toEqual(1);\n\n            resolve();\n\n        });\n\n        //\n        // service.connections[ 0 ].reference$.subscribe(reference => {\n        //     console.log(3);\n        //     console.log(reference);\n        //\n        // });\n        // console.log(4);\n        // console.log(service.connections);\n        // await publisher.connect();\n        //\n        // const channel = await publisher.amqp.createChannel();\n        // console.log(channel);\n        // console.log(await channel.assertExchange('test-2', 'topic'));\n        //\n        // await app.close();\n\n\n    });\n\n    test('Publish Message', async () => {\n\n        return new Promise<void>(resolve => {\n\n            amqpService.getConnection('two').subscribe(connection => {\n\n                c = connection;\n                connection.queue.publish({ exchange: 'test-1', message: Buffer.from('a'), routingKey: '1' });\n\n                expect(connection.config).toBeTruthy();\n\n                resolve();\n\n            });\n\n        });\n\n    });\n\n    test('AMQPMessage', () => {\n\n        const message = new AMQPMessage({\n            content: Buffer.from(JSON.stringify({ a: 1, b: 2 }))\n        } as ConsumeMessage);\n\n        return expect(message.fromJSON()).toBeTruthy();\n\n    });\n\n    afterAll(async () => {\n\n        amqpService.disconnect();\n\n        await app.close();\n\n        return new Promise<void>(resolve => {\n\n            setTimeout(() => {\n\n                resolve();\n\n            }, 1000);\n\n        });\n\n    });\n\n});\n"],"version":3}