d195a2e3b4747203501932bf1555089e
"use strict";

/* istanbul ignore next */
function cov_238oyc4f67() {
  var path = "/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/AMQPConnection.ts";
  var hash = "ff8ebab45ba6a849cb020ed6bfae59ee75f780d7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/AMQPConnection.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 13
        },
        end: {
          line: 4,
          column: 31
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 30
        }
      },
      "4": {
        start: {
          line: 6,
          column: 31
        },
        end: {
          line: 6,
          column: 64
        }
      },
      "5": {
        start: {
          line: 7,
          column: 14
        },
        end: {
          line: 7,
          column: 30
        }
      },
      "6": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 51
        }
      },
      "7": {
        start: {
          line: 9,
          column: 23
        },
        end: {
          line: 9,
          column: 56
        }
      },
      "8": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 10,
          column: 55
        }
      },
      "9": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "10": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 29
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 50
        }
      },
      "12": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 53
        }
      },
      "13": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 32
        }
      },
      "14": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 153
        }
      },
      "15": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 79
        }
      },
      "16": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "17": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 29
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 23
        }
      },
      "19": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 82
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 65,
          column: 12
        }
      },
      "21": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 197
        }
      },
      "22": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "23": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 49
        }
      },
      "24": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "25": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 95,
          column: 15
        }
      },
      "26": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "27": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 193
        }
      },
      "28": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 74,
          column: 19
        }
      },
      "29": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 192
        }
      },
      "30": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 43
        }
      },
      "31": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "32": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 194
        }
      },
      "33": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 80,
          column: 19
        }
      },
      "34": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 196
        }
      },
      "35": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 83,
          column: 19
        }
      },
      "36": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 192
        }
      },
      "37": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 86,
          column: 19
        }
      },
      "38": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 194
        }
      },
      "39": {
        start: {
          line: 87,
          column: 32
        },
        end: {
          line: 87,
          column: 64
        }
      },
      "40": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 90
        }
      },
      "41": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 57
        }
      },
      "42": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 62
        }
      },
      "43": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 86
        }
      },
      "44": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 94,
          column: 20
        }
      },
      "45": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 93,
          column: 167
        }
      },
      "46": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 35
        }
      },
      "47": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 85
        }
      },
      "48": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 27
        }
      },
      "49": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 41
        }
      },
      "50": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 81
        }
      },
      "51": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "52": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "53": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 53
        }
      },
      "54": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "55": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 56
        }
      },
      "56": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 34
        }
      },
      "57": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 32
        }
      },
      "58": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 29
        }
      },
      "59": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 116
        }
      },
      "60": {
        start: {
          line: 128,
          column: 25
        },
        end: {
          line: 128,
          column: 45
        }
      },
      "61": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "62": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "63": {
        start: {
          line: 130,
          column: 25
        },
        end: {
          line: 130,
          column: 26
        }
      },
      "64": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 189
        }
      },
      "65": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 80
        }
      },
      "66": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 184
        }
      },
      "67": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 78
        }
      },
      "68": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 28
        }
      },
      "69": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 24
        }
      },
      "70": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 168
        }
      },
      "71": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 149,
          column: 45
        }
      },
      "72": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 167,
          column: 12
        }
      },
      "73": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "74": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 165,
          column: 17
        }
      },
      "75": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 143
        }
      },
      "76": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 161,
          column: 21
        }
      },
      "77": {
        start: {
          line: 154,
          column: 33
        },
        end: {
          line: 154,
          column: 34
        }
      },
      "78": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 160,
          column: 25
        }
      },
      "79": {
        start: {
          line: 156,
          column: 28
        },
        end: {
          line: 156,
          column: 92
        }
      },
      "80": {
        start: {
          line: 157,
          column: 28
        },
        end: {
          line: 157,
          column: 238
        }
      },
      "81": {
        start: {
          line: 158,
          column: 28
        },
        end: {
          line: 158,
          column: 151
        }
      },
      "82": {
        start: {
          line: 159,
          column: 28
        },
        end: {
          line: 159,
          column: 236
        }
      },
      "83": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 162,
          column: 36
        }
      },
      "84": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 24
        }
      },
      "85": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 29
        }
      },
      "86": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "87": {
        start: {
          line: 189,
          column: 25
        },
        end: {
          line: 189,
          column: 45
        }
      },
      "88": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "89": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "90": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 236
        }
      },
      "91": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 205,
          column: 20
        }
      },
      "92": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 204,
          column: 51
        }
      },
      "93": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 211,
          column: 17
        }
      },
      "94": {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 210,
          column: 51
        }
      },
      "95": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 24
        }
      },
      "96": {
        start: {
          line: 228,
          column: 25
        },
        end: {
          line: 228,
          column: 45
        }
      },
      "97": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "98": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 73
        }
      },
      "99": {
        start: {
          line: 236,
          column: 13
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "100": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 68
        }
      },
      "101": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 258,
          column: 11
        }
      },
      "102": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 236
        }
      },
      "103": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 250,
          column: 29
        }
      },
      "104": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 64
        }
      },
      "105": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 70
        }
      },
      "106": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 82
        }
      },
      "107": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 257,
          column: 28
        }
      },
      "108": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 41
        }
      },
      "109": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 24
        }
      },
      "110": {
        start: {
          line: 262,
          column: 25
        },
        end: {
          line: 262,
          column: 45
        }
      },
      "111": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      },
      "112": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 202
        }
      },
      "113": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 77
        }
      },
      "114": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 274,
          column: 24
        }
      },
      "115": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 37
        }
      },
      "116": {
        start: {
          line: 268,
          column: 30
        },
        end: {
          line: 268,
          column: 47
        }
      },
      "117": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 35
        }
      },
      "118": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 273,
          column: 19
        }
      },
      "119": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 24
        }
      },
      "120": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 46
        }
      },
      "121": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 79
        }
      },
      "122": {
        start: {
          line: 282,
          column: 51
        },
        end: {
          line: 282,
          column: 77
        }
      },
      "123": {
        start: {
          line: 285,
          column: 0
        },
        end: {
          line: 285,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 32
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 14
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 55
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 60,
            column: 52
          },
          end: {
            line: 60,
            column: 53
          }
        },
        loc: {
          start: {
            line: 60,
            column: 62
          },
          end: {
            line: 65,
            column: 9
          }
        },
        line: 60
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 89
          },
          end: {
            line: 67,
            column: 90
          }
        },
        loc: {
          start: {
            line: 67,
            column: 111
          },
          end: {
            line: 95,
            column: 13
          }
        },
        line: 67
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 68,
            column: 39
          },
          end: {
            line: 68,
            column: 40
          }
        },
        loc: {
          start: {
            line: 68,
            column: 45
          },
          end: {
            line: 70,
            column: 17
          }
        },
        line: 68
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 71,
            column: 39
          },
          end: {
            line: 71,
            column: 40
          }
        },
        loc: {
          start: {
            line: 71,
            column: 56
          },
          end: {
            line: 74,
            column: 17
          }
        },
        line: 71
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 41
          },
          end: {
            line: 75,
            column: 42
          }
        },
        loc: {
          start: {
            line: 75,
            column: 51
          },
          end: {
            line: 77,
            column: 17
          }
        },
        line: 75
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 78,
            column: 43
          },
          end: {
            line: 78,
            column: 44
          }
        },
        loc: {
          start: {
            line: 78,
            column: 49
          },
          end: {
            line: 80,
            column: 17
          }
        },
        line: 78
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 81,
            column: 39
          },
          end: {
            line: 81,
            column: 40
          }
        },
        loc: {
          start: {
            line: 81,
            column: 45
          },
          end: {
            line: 83,
            column: 17
          }
        },
        line: 81
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 84,
            column: 40
          },
          end: {
            line: 84,
            column: 41
          }
        },
        loc: {
          start: {
            line: 84,
            column: 51
          },
          end: {
            line: 86,
            column: 17
          }
        },
        line: 84
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 92,
            column: 71
          },
          end: {
            line: 92,
            column: 72
          }
        },
        loc: {
          start: {
            line: 92,
            column: 77
          },
          end: {
            line: 94,
            column: 17
          }
        },
        line: 92
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 23
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 109
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 22
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 122
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 15
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 126
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 129,
            column: 34
          },
          end: {
            line: 129,
            column: 35
          }
        },
        loc: {
          start: {
            line: 129,
            column: 55
          },
          end: {
            line: 137,
            column: 9
          }
        },
        line: 129
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 23
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 147
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 150,
            column: 81
          },
          end: {
            line: 150,
            column: 82
          }
        },
        loc: {
          start: {
            line: 150,
            column: 102
          },
          end: {
            line: 167,
            column: 9
          }
        },
        line: 150
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 175
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 26
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 188
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 193,
            column: 34
          },
          end: {
            line: 193,
            column: 35
          }
        },
        loc: {
          start: {
            line: 193,
            column: 47
          },
          end: {
            line: 213,
            column: 9
          }
        },
        line: 193
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 197,
            column: 56
          },
          end: {
            line: 197,
            column: 57
          }
        },
        loc: {
          start: {
            line: 197,
            column: 67
          },
          end: {
            line: 212,
            column: 13
          }
        },
        line: 197
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 202,
            column: 69
          },
          end: {
            line: 202,
            column: 70
          }
        },
        loc: {
          start: {
            line: 202,
            column: 75
          },
          end: {
            line: 205,
            column: 17
          }
        },
        line: 202
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 18
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 227
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 242,
            column: 34
          },
          end: {
            line: 242,
            column: 35
          }
        },
        loc: {
          start: {
            line: 242,
            column: 47
          },
          end: {
            line: 258,
            column: 9
          }
        },
        line: 242
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 247,
            column: 50
          },
          end: {
            line: 247,
            column: 51
          }
        },
        loc: {
          start: {
            line: 247,
            column: 61
          },
          end: {
            line: 250,
            column: 13
          }
        },
        line: 247
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 255,
            column: 39
          },
          end: {
            line: 255,
            column: 40
          }
        },
        loc: {
          start: {
            line: 255,
            column: 45
          },
          end: {
            line: 257,
            column: 13
          }
        },
        line: 255
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 41
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 261
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 263,
            column: 34
          },
          end: {
            line: 263,
            column: 35
          }
        },
        loc: {
          start: {
            line: 263,
            column: 55
          },
          end: {
            line: 275,
            column: 9
          }
        },
        line: 263
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 266,
            column: 45
          },
          end: {
            line: 266,
            column: 46
          }
        },
        loc: {
          start: {
            line: 266,
            column: 56
          },
          end: {
            line: 274,
            column: 13
          }
        },
        line: 266
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 34
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 278
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 32
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 281
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 282,
            column: 35
          },
          end: {
            line: 282,
            column: 36
          }
        },
        loc: {
          start: {
            line: 282,
            column: 51
          },
          end: {
            line: 282,
            column: 77
          }
        },
        line: 282
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "1": {
        loc: {
          start: {
            line: 67,
            column: 53
          },
          end: {
            line: 67,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 53
          },
          end: {
            line: 67,
            column: 72
          }
        }, {
          start: {
            line: 67,
            column: 76
          },
          end: {
            line: 67,
            column: 80
          }
        }],
        line: 67
      },
      "2": {
        loc: {
          start: {
            line: 88,
            column: 39
          },
          end: {
            line: 88,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 88,
            column: 64
          },
          end: {
            line: 88,
            column: 84
          }
        }, {
          start: {
            line: 88,
            column: 87
          },
          end: {
            line: 88,
            column: 88
          }
        }],
        line: 88
      },
      "3": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "4": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "5": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "6": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "7": {
        loc: {
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 160,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 160,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "8": {
        loc: {
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 211,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 211,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "9": {
        loc: {
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: 236,
            column: 13
          },
          end: {
            line: 238,
            column: 9
          }
        }],
        line: 233
      },
      "10": {
        loc: {
          start: {
            line: 236,
            column: 13
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 13
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "11": {
        loc: {
          start: {
            line: 236,
            column: 17
          },
          end: {
            line: 236,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 17
          },
          end: {
            line: 236,
            column: 29
          }
        }, {
          start: {
            line: 236,
            column: 33
          },
          end: {
            line: 236,
            column: 60
          }
        }],
        line: 236
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/AMQPConnection.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/AMQPConnection.ts"],
      sourcesContent: ["import * as amqp from 'amqplib';\nimport { Replies } from 'amqplib';\nimport { AMQPConfigConnection } from './configuration/AMQPConfigConnection';\nimport { ReplaySubject, BehaviorSubject, Subject, Subscription, first } from 'rxjs';\nimport { AMQPReference } from './AMQPReference';\nimport { AMQPConnectionStatus } from './AMQPConnectionStatus';\nimport { AMQPLogger } from './logging/AMQPLogger';\nimport * as chalk from 'chalk';\nimport { AMQPQueue } from './queueing/AMQPQueue';\nimport { AMQPLogEmoji } from './logging/AMQPLogEmoji';\nimport { AMQPMessage } from './queueing/AMQPMessage';\nimport { AMQPSubscriber } from './queueing/AMQPSubscriber';\nimport { AMQPRPCCall } from './queueing/AMQPRPCCall';\nimport { randomUUID } from 'crypto';\nimport Consume = Replies.Consume;\n\n/**\n * AMQP individual connection class.\n */\nexport class AMQPConnection {\n\n    /**\n     * Connection status.\n     *\n     * @type {AMQPConnectionStatus}\n     */\n    public status: AMQPConnectionStatus;\n\n    /**\n     * Connection status event change observable.\n     *\n     * @type {BehaviorSubject<AMQPConnectionStatus>}\n     */\n    public status$: ReplaySubject<AMQPConnectionStatus> = new ReplaySubject();\n\n    /**\n     * Connection configuration settings.\n     *\n     * @type {AMQPConfigConnection}\n     */\n    public config: AMQPConfigConnection;\n\n    /**\n     * References to the connection and channel for this connection.\n     *\n     * @type {ReplaySubject<AMQPReference>}\n     */\n    public reference$: ReplaySubject<AMQPReference> = new ReplaySubject();\n    public reference: AMQPReference;\n\n    /**\n     * Queue for managing message delivery.\n     *\n     * @type {AMQPQueue}\n     */\n    public queue: AMQPQueue;\n\n    /**\n     * Maintain a list of active observable subscriptions so\n     * they can be cancelled later in the event of a state change.\n     *\n     * @type {Subscription}\n     * @private\n     */\n    private subscriptions: Array<Subscription> = [];\n\n    /**\n     * AMQP individual connection class constructor (requires a configuration object).\n     *\n     * @param {AMQPConfigConnection} config\n     * @param {AMQPLogger} logger\n     */\n    public constructor(config: AMQPConfigConnection, public readonly logger: AMQPLogger) {\n\n        this.logger.trace(`Instantiating AMQP connection \"${ chalk.yellowBright(config.name) }\"..`, AMQPLogEmoji.NEW, 'CONNECTION MANAGER');\n\n        this.status = AMQPConnectionStatus.DISCONNECTED;\n        this.queue = new AMQPQueue(this);\n        this.config = config;\n\n        this.connect();\n\n    }\n\n    /**\n     * Connect to the AMQP server.\n     *\n     * @returns {ReplaySubject<AMQPReference>}\n     */\n    public connect(): ReplaySubject<AMQPReference> {\n\n        this.status$.next(AMQPConnectionStatus.CONNECTING);\n\n        //\n        // Subscribe to status changes so we can log them.\n        //\n        this.addSubscription(this.status$.subscribe(status => {\n\n            this.logger.debug(`Connection status changed to ${ chalk.greenBright(status) } for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'STATUS');\n\n            if (status !== AMQPConnectionStatus.CONNECTED) {\n\n                this.cancelActiveSubscriptions();\n\n            }\n\n        }));\n\n        try {\n\n            amqp.connect(this.config.url, { timeout: this.config.timeout || 5000 }).then(async connection => {\n\n                connection.on('close', () => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('CLOSED') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                connection.on('error', async error => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('ERROR') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                    await this.reconnect();\n\n                });\n\n                connection.on('blocked', reason => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('BLOCKED') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                connection.on('unblocked', () => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('UNBLOCKED') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                connection.on('drain', () => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('DRAIN') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                connection.on('return', message => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('MESSAGE') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                const channel = await connection.createChannel();\n                await channel.prefetch(!!this.config.prefetch ? this.config.prefetch : 1);\n\n                this.reference = { connection, channel };\n                this.reference$.next({ connection, channel });\n\n                this.setStatus(AMQPConnectionStatus.CONNECTED);\n\n                this.addSubscription(this.declareResources().subscribe(() => {\n\n                    this.logger.info(`AMQP connection \"${ chalk.yellowBright(this.config.name) }\" is ready!`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n                }));\n\n            });\n\n            return this.reference$;\n\n        } catch (e) {\n\n            this.setStatus(AMQPConnectionStatus.DISCONNECTED);\n\n            console.log(e);\n\n        }\n\n    }\n\n    /**\n     * Disconnect from the AMQP server.\n     * (This does not remove any resources such as queues, exchanges, etc..)\n     *\n     * @author Matthew Davis <matthew@matthewdavis.io\n     */\n    public async disconnect(): Promise<void> {\n\n        this.cancelActiveSubscriptions();\n\n        this.setStatus(AMQPConnectionStatus.DISCONNECTED);\n\n        if (this.reference) {\n\n            if (this.reference.channel) {\n\n                await this.reference.channel.close();\n\n            }\n\n            if (this.reference.connection) {\n\n                await this.reference.connection.close();\n\n            }\n\n            this.reference = null;\n\n        }\n\n    }\n\n    public async reconnect(): Promise<void> {\n\n        await this.disconnect();\n        await this.connect();\n\n    }\n\n    public tearDown(): Subject<void> {\n\n        this.logger.debug(`Tearing down AMQP resources for connection \"${ chalk.yellowBright(this.config.name) }\"..`);\n\n        const subject$: Subject<void> = new Subject();\n\n        this.reference$.subscribe(async reference => {\n\n            for (let i = 0; i < this.config.queues.length; i++) {\n\n                this.logger.debug(`Deleting queue \"${ this.config.queues[ i ].name }\" on AMQP connection \"${ this.config.name }\"..`, AMQPLogEmoji.DISCONNECT, 'CONNECTION MANAGER');\n\n                await reference.channel.deleteQueue(this.config.queues[ i ].name);\n\n            }\n\n            this.logger.debug(`Deleting queue \"${ this.config.exchange.name }\" on AMQP connection \"${ this.config.name }\"..`, AMQPLogEmoji.DISCONNECT, 'CONNECTION MANAGER');\n\n            await reference.channel.deleteExchange(this.config.exchange.name);\n\n            subject$.next();\n\n        });\n\n        return subject$;\n\n    }\n\n    /**\n     * Declare exchange and queue(s) then setup bindings.\n     *\n     * @author Matthew Davis <matthew@matthewdavis.io>\n     *\n     * @returns {Subject<void>} Observable emitted when complete.\n     */\n    public declareResources(): Subject<void> {\n\n        this.logger.debug(`Declaring AMQP resources for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.NEW, 'CONNECTION MANAGER');\n\n        const subject$: Subject<void> = new Subject();\n\n        this.addSubscription(this.reference$.pipe(first()).subscribe(async reference => {\n\n            if (this.status === AMQPConnectionStatus.CONNECTED) {\n\n                try {\n\n                    await reference.channel.assertExchange(this.config.exchange.name, this.config.exchange.type, this.config.exchange.options);\n\n\n                    for (let i = 0; i < this.config.queues.length; i++) {\n\n                        if (this.config.queues[ i ].createBindings) {\n\n                            await reference.channel.assertQueue(this.config.queues[ i ].name);\n                            this.logger.debug(`Declared the queue \"${ chalk.yellowBright(this.config.queues[ i ].name) }\" for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n                            await reference.channel.bindQueue(this.config.queues[ i ].name, this.config.exchange.name, this.config.queues[ i ].routingKey);\n                            this.logger.debug(`Binded the queue \"${ chalk.yellowBright(this.config.queues[ i ].name) }\" for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n                        }\n\n                    }\n\n                    subject$.next();\n\n                } catch (e) {\n\n\n                }\n            }\n\n        }));\n\n        return subject$;\n\n    }\n\n    /**\n     * Change status to a new value.\n     *\n     * @param {AMQPConnectionStatus} status\n     */\n    public setStatus(status: AMQPConnectionStatus): void {\n\n        this.status = status;\n\n        this.status$.next(status);\n\n    }\n\n    /**\n     * Subscribe to a queue returning an observable.\n     *\n     * Message will auto-acknowledge itself when emitted if not disabled.\n     *\n     * @param {AMQPSubscriber} subscriber Subscripton configuration object.\n     *\n     * @return {Subject<AMQPMessage>} Observable emitting new messages on arrival.\n     */\n    public subscribe(subscriber: AMQPSubscriber): Subject<AMQPMessage<any>> {\n\n        const subject$: Subject<AMQPMessage<any>> = new Subject();\n\n        //\n        // Acquire connection reference.\n        //\n        this.reference$.subscribe(reference => {\n\n            //\n            // Start consuming (subscribing) new messages.\n            //\n            reference.channel.consume(subscriber.queue, message => {\n\n                this.logger.debug(`Subscribe emitted deliveryTag #${ chalk.yellowBright(message.fields.deliveryTag) } for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n                //\n                // Emit the new message.\n                //\n                subject$.next(new AMQPMessage<any>(message, () => {\n\n                    // Lazy acknowledgement method.\n                    reference.channel.ack(message);\n\n                }));\n\n                //\n                // Automatically acknowledge message if not otherwise set to true.\n                //\n                if (!subscriber.noAck) {\n\n                    reference.channel.ack(message);\n\n                }\n\n            });\n\n        });\n\n        return subject$;\n\n    }\n\n    /**\n     * Perform an RPC call and return the response.\n     *\n     * Before performing the request a new queue will be generated\n     * and subcribe to temporarily.\n     *\n     * **NOTE:** This call is susceptible to a timout (defaults to 5 seconds).\n     *\n     * @param {AMQPRPCCall} call RPC call configuration object.\n     * @return {Subject<any>} Observable which emits a reply of type {T}.\n     */\n    public rpcCall<T>(call: AMQPRPCCall): Subject<AMQPMessage<T>> {\n\n        const subject$: Subject<AMQPMessage<T>> = new Subject();\n\n        //\n        // Calculate correlationId (used for mapping the sender\n        // and receiver of a message across pub/sub sessions).\n        //\n        if (!call.options) {\n\n            call.options = { correlationId: randomUUID() };\n\n        } else if (call.options && !call.options.correlationId) {\n\n            call.options.correlationId = randomUUID();\n\n        }\n\n        //\n        // Acquire the connection reference safely.\n        //\n        this.reference$.subscribe(reference => {\n\n            this.logger.debug(`Sending RPC call to correlationId #${ chalk.yellowBright(call.options.correlationId) } for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n            //\n            // Kick off the consumer first.\n            //\n            reference.channel.consume(call.queue, message => {\n\n                console.log(`a: ${ message.content.toString() }`);\n\n                subject$.next(new AMQPMessage<T>(message));\n\n            }, call.options);\n\n            //\n            // Publish the RPC message.\n            //\n            reference.channel.sendToQueue(call.queue, call.message, call.options);\n\n            const timeout = setTimeout(() => {\n\n                console.log('timed out');\n\n            }, call.timeout);\n\n        });\n\n        return subject$;\n\n    }\n\n    public rpcConsume<T>(queue: string, callback: Function, options?: Consume): Subject<T> {\n\n        const subject$: Subject<T> = new Subject();\n\n        this.reference$.subscribe(async reference => {\n\n            this.logger.debug(`RPC consuming queue \"${ chalk.yellowBright(queue) }\" for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n            await reference.channel.assertQueue(queue, { autoDelete: true });\n\n            reference.channel.consume(queue, message => {\n\n                console.log(message);\n\n                const reply = callback(message);\n\n\n                console.log(reply);\n                reference.channel.sendToQueue(queue, Buffer.from(reply), {\n\n                    correlationId: message.properties.correlationId,\n                    replyTo: message.properties.replyTo\n\n                });\n\n            }, options);\n\n        });\n\n        return subject$;\n\n    }\n\n    public addSubscription(subscription: Subscription): void {\n\n        this.subscriptions.push(subscription);\n\n\n    }\n\n    public cancelActiveSubscriptions(): void {\n\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n\n    }\n\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ff8ebab45ba6a849cb020ed6bfae59ee75f780d7"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_238oyc4f67 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_238oyc4f67();
cov_238oyc4f67().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_238oyc4f67().s[1]++;
exports.AMQPConnection = void 0;
const amqp =
/* istanbul ignore next */
(cov_238oyc4f67().s[2]++, require("amqplib"));
const rxjs_1 =
/* istanbul ignore next */
(cov_238oyc4f67().s[3]++, require("rxjs"));
const AMQPConnectionStatus_1 =
/* istanbul ignore next */
(cov_238oyc4f67().s[4]++, require("./AMQPConnectionStatus"));
const chalk =
/* istanbul ignore next */
(cov_238oyc4f67().s[5]++, require("chalk"));
const AMQPQueue_1 =
/* istanbul ignore next */
(cov_238oyc4f67().s[6]++, require("./queueing/AMQPQueue"));
const AMQPLogEmoji_1 =
/* istanbul ignore next */
(cov_238oyc4f67().s[7]++, require("./logging/AMQPLogEmoji"));
const AMQPMessage_1 =
/* istanbul ignore next */
(cov_238oyc4f67().s[8]++, require("./queueing/AMQPMessage"));
const crypto_1 =
/* istanbul ignore next */
(cov_238oyc4f67().s[9]++, require("crypto"));
/**
 * AMQP individual connection class.
 */

class AMQPConnection {
  /**
   * AMQP individual connection class constructor (requires a configuration object).
   *
   * @param {AMQPConfigConnection} config
   * @param {AMQPLogger} logger
   */
  constructor(config, logger) {
    /* istanbul ignore next */
    cov_238oyc4f67().f[0]++;
    cov_238oyc4f67().s[10]++;
    this.logger = logger;
    /**
     * Connection status event change observable.
     *
     * @type {BehaviorSubject<AMQPConnectionStatus>}
     */

    /* istanbul ignore next */
    cov_238oyc4f67().s[11]++;
    this.status$ = new rxjs_1.ReplaySubject();
    /**
     * References to the connection and channel for this connection.
     *
     * @type {ReplaySubject<AMQPReference>}
     */

    /* istanbul ignore next */
    cov_238oyc4f67().s[12]++;
    this.reference$ = new rxjs_1.ReplaySubject();
    /**
     * Maintain a list of active observable subscriptions so
     * they can be cancelled later in the event of a state change.
     *
     * @type {Subscription}
     * @private
     */

    /* istanbul ignore next */
    cov_238oyc4f67().s[13]++;
    this.subscriptions = [];

    /* istanbul ignore next */
    cov_238oyc4f67().s[14]++;
    this.logger.trace(`Instantiating AMQP connection "${chalk.yellowBright(config.name)}"..`, AMQPLogEmoji_1.AMQPLogEmoji.NEW, 'CONNECTION MANAGER');

    /* istanbul ignore next */
    cov_238oyc4f67().s[15]++;
    this.status = AMQPConnectionStatus_1.AMQPConnectionStatus.DISCONNECTED;

    /* istanbul ignore next */
    cov_238oyc4f67().s[16]++;
    this.queue = new AMQPQueue_1.AMQPQueue(this);

    /* istanbul ignore next */
    cov_238oyc4f67().s[17]++;
    this.config = config;

    /* istanbul ignore next */
    cov_238oyc4f67().s[18]++;
    this.connect();
  }
  /**
   * Connect to the AMQP server.
   *
   * @returns {ReplaySubject<AMQPReference>}
   */


  connect() {
    /* istanbul ignore next */
    cov_238oyc4f67().f[1]++;
    cov_238oyc4f67().s[19]++;
    this.status$.next(AMQPConnectionStatus_1.AMQPConnectionStatus.CONNECTING); //
    // Subscribe to status changes so we can log them.
    //

    /* istanbul ignore next */
    cov_238oyc4f67().s[20]++;
    this.addSubscription(this.status$.subscribe((status) => {
      /* istanbul ignore next */
      cov_238oyc4f67().f[2]++;
      cov_238oyc4f67().s[21]++;
      this.logger.debug(`Connection status changed to ${chalk.greenBright(status)} for connection "${chalk.yellowBright(this.config.name)}".`, AMQPLogEmoji_1.AMQPLogEmoji.SETTINGS, 'STATUS');

      /* istanbul ignore next */
      cov_238oyc4f67().s[22]++;

      if (status !== AMQPConnectionStatus_1.AMQPConnectionStatus.CONNECTED) {
        /* istanbul ignore next */
        cov_238oyc4f67().b[0][0]++;
        cov_238oyc4f67().s[23]++;
        this.cancelActiveSubscriptions();
      } else
      /* istanbul ignore next */
      {
        cov_238oyc4f67().b[0][1]++;
      }
    }));

    /* istanbul ignore next */
    cov_238oyc4f67().s[24]++;

    try {
      /* istanbul ignore next */
      cov_238oyc4f67().s[25]++;
      amqp.connect(this.config.url, {
        timeout:
        /* istanbul ignore next */
        (cov_238oyc4f67().b[1][0]++, this.config.timeout) ||
        /* istanbul ignore next */
        (cov_238oyc4f67().b[1][1]++, 5000)
      }).then(async (connection) => {
        /* istanbul ignore next */
        cov_238oyc4f67().f[3]++;
        cov_238oyc4f67().s[26]++;
        connection.on('close', () => {
          /* istanbul ignore next */
          cov_238oyc4f67().f[4]++;
          cov_238oyc4f67().s[27]++;
          this.logger.debug(`Server said: "${chalk.greenBright('CLOSED')}" for connection "${chalk.yellowBright(this.config.name)}".`, AMQPLogEmoji_1.AMQPLogEmoji.SETTINGS, 'SERVER');
        });

        /* istanbul ignore next */
        cov_238oyc4f67().s[28]++;
        connection.on('error', async (error) => {
          /* istanbul ignore next */
          cov_238oyc4f67().f[5]++;
          cov_238oyc4f67().s[29]++;
          this.logger.debug(`Server said: "${chalk.greenBright('ERROR')}" for connection "${chalk.yellowBright(this.config.name)}".`, AMQPLogEmoji_1.AMQPLogEmoji.SETTINGS, 'SERVER');

          /* istanbul ignore next */
          cov_238oyc4f67().s[30]++;
          await this.reconnect();
        });

        /* istanbul ignore next */
        cov_238oyc4f67().s[31]++;
        connection.on('blocked', (reason) => {
          /* istanbul ignore next */
          cov_238oyc4f67().f[6]++;
          cov_238oyc4f67().s[32]++;
          this.logger.debug(`Server said: "${chalk.greenBright('BLOCKED')}" for connection "${chalk.yellowBright(this.config.name)}".`, AMQPLogEmoji_1.AMQPLogEmoji.SETTINGS, 'SERVER');
        });

        /* istanbul ignore next */
        cov_238oyc4f67().s[33]++;
        connection.on('unblocked', () => {
          /* istanbul ignore next */
          cov_238oyc4f67().f[7]++;
          cov_238oyc4f67().s[34]++;
          this.logger.debug(`Server said: "${chalk.greenBright('UNBLOCKED')}" for connection "${chalk.yellowBright(this.config.name)}".`, AMQPLogEmoji_1.AMQPLogEmoji.SETTINGS, 'SERVER');
        });

        /* istanbul ignore next */
        cov_238oyc4f67().s[35]++;
        connection.on('drain', () => {
          /* istanbul ignore next */
          cov_238oyc4f67().f[8]++;
          cov_238oyc4f67().s[36]++;
          this.logger.debug(`Server said: "${chalk.greenBright('DRAIN')}" for connection "${chalk.yellowBright(this.config.name)}".`, AMQPLogEmoji_1.AMQPLogEmoji.SETTINGS, 'SERVER');
        });

        /* istanbul ignore next */
        cov_238oyc4f67().s[37]++;
        connection.on('return', (message) => {
          /* istanbul ignore next */
          cov_238oyc4f67().f[9]++;
          cov_238oyc4f67().s[38]++;
          this.logger.debug(`Server said: "${chalk.greenBright('MESSAGE')}" for connection "${chalk.yellowBright(this.config.name)}".`, AMQPLogEmoji_1.AMQPLogEmoji.SETTINGS, 'SERVER');
        });
        const channel =
        /* istanbul ignore next */
        (cov_238oyc4f67().s[39]++, await connection.createChannel());

        /* istanbul ignore next */
        cov_238oyc4f67().s[40]++;
        await channel.prefetch(!!this.config.prefetch ?
        /* istanbul ignore next */
        (cov_238oyc4f67().b[2][0]++, this.config.prefetch) :
        /* istanbul ignore next */
        (cov_238oyc4f67().b[2][1]++, 1));

        /* istanbul ignore next */
        cov_238oyc4f67().s[41]++;
        this.reference = {
          connection,
          channel
        };

        /* istanbul ignore next */
        cov_238oyc4f67().s[42]++;
        this.reference$.next({
          connection,
          channel
        });

        /* istanbul ignore next */
        cov_238oyc4f67().s[43]++;
        this.setStatus(AMQPConnectionStatus_1.AMQPConnectionStatus.CONNECTED);

        /* istanbul ignore next */
        cov_238oyc4f67().s[44]++;
        this.addSubscription(this.declareResources().subscribe(() => {
          /* istanbul ignore next */
          cov_238oyc4f67().f[10]++;
          cov_238oyc4f67().s[45]++;
          this.logger.info(`AMQP connection "${chalk.yellowBright(this.config.name)}" is ready!`, AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');
        }));
      });

      /* istanbul ignore next */
      cov_238oyc4f67().s[46]++;
      return this.reference$;
    } catch (e) {
      /* istanbul ignore next */
      cov_238oyc4f67().s[47]++;
      this.setStatus(AMQPConnectionStatus_1.AMQPConnectionStatus.DISCONNECTED);

      /* istanbul ignore next */
      cov_238oyc4f67().s[48]++;
      console.log(e);
    }
  }
  /**
   * Disconnect from the AMQP server.
   * (This does not remove any resources such as queues, exchanges, etc..)
   *
   * @author Matthew Davis <matthew@matthewdavis.io
   */


  async disconnect() {
    /* istanbul ignore next */
    cov_238oyc4f67().f[11]++;
    cov_238oyc4f67().s[49]++;
    this.cancelActiveSubscriptions();

    /* istanbul ignore next */
    cov_238oyc4f67().s[50]++;
    this.setStatus(AMQPConnectionStatus_1.AMQPConnectionStatus.DISCONNECTED);

    /* istanbul ignore next */
    cov_238oyc4f67().s[51]++;

    if (this.reference) {
      /* istanbul ignore next */
      cov_238oyc4f67().b[3][0]++;
      cov_238oyc4f67().s[52]++;

      if (this.reference.channel) {
        /* istanbul ignore next */
        cov_238oyc4f67().b[4][0]++;
        cov_238oyc4f67().s[53]++;
        await this.reference.channel.close();
      } else
      /* istanbul ignore next */
      {
        cov_238oyc4f67().b[4][1]++;
      }

      cov_238oyc4f67().s[54]++;

      if (this.reference.connection) {
        /* istanbul ignore next */
        cov_238oyc4f67().b[5][0]++;
        cov_238oyc4f67().s[55]++;
        await this.reference.connection.close();
      } else
      /* istanbul ignore next */
      {
        cov_238oyc4f67().b[5][1]++;
      }

      cov_238oyc4f67().s[56]++;
      this.reference = null;
    } else
    /* istanbul ignore next */
    {
      cov_238oyc4f67().b[3][1]++;
    }
  }

  async reconnect() {
    /* istanbul ignore next */
    cov_238oyc4f67().f[12]++;
    cov_238oyc4f67().s[57]++;
    await this.disconnect();

    /* istanbul ignore next */
    cov_238oyc4f67().s[58]++;
    await this.connect();
  }

  tearDown() {
    /* istanbul ignore next */
    cov_238oyc4f67().f[13]++;
    cov_238oyc4f67().s[59]++;
    this.logger.debug(`Tearing down AMQP resources for connection "${chalk.yellowBright(this.config.name)}"..`);
    const subject$ =
    /* istanbul ignore next */
    (cov_238oyc4f67().s[60]++, new rxjs_1.Subject());

    /* istanbul ignore next */
    cov_238oyc4f67().s[61]++;
    this.reference$.subscribe(async (reference) => {
      /* istanbul ignore next */
      cov_238oyc4f67().f[14]++;
      cov_238oyc4f67().s[62]++;

      for (let i =
      /* istanbul ignore next */
      (cov_238oyc4f67().s[63]++, 0); i < this.config.queues.length; i++) {
        /* istanbul ignore next */
        cov_238oyc4f67().s[64]++;
        this.logger.debug(`Deleting queue "${this.config.queues[i].name}" on AMQP connection "${this.config.name}"..`, AMQPLogEmoji_1.AMQPLogEmoji.DISCONNECT, 'CONNECTION MANAGER');

        /* istanbul ignore next */
        cov_238oyc4f67().s[65]++;
        await reference.channel.deleteQueue(this.config.queues[i].name);
      }

      /* istanbul ignore next */
      cov_238oyc4f67().s[66]++;
      this.logger.debug(`Deleting queue "${this.config.exchange.name}" on AMQP connection "${this.config.name}"..`, AMQPLogEmoji_1.AMQPLogEmoji.DISCONNECT, 'CONNECTION MANAGER');

      /* istanbul ignore next */
      cov_238oyc4f67().s[67]++;
      await reference.channel.deleteExchange(this.config.exchange.name);

      /* istanbul ignore next */
      cov_238oyc4f67().s[68]++;
      subject$.next();
    });

    /* istanbul ignore next */
    cov_238oyc4f67().s[69]++;
    return subject$;
  }
  /**
   * Declare exchange and queue(s) then setup bindings.
   *
   * @author Matthew Davis <matthew@matthewdavis.io>
   *
   * @returns {Subject<void>} Observable emitted when complete.
   */


  declareResources() {
    /* istanbul ignore next */
    cov_238oyc4f67().f[15]++;
    cov_238oyc4f67().s[70]++;
    this.logger.debug(`Declaring AMQP resources for connection "${chalk.yellowBright(this.config.name)}"..`, AMQPLogEmoji_1.AMQPLogEmoji.NEW, 'CONNECTION MANAGER');
    const subject$ =
    /* istanbul ignore next */
    (cov_238oyc4f67().s[71]++, new rxjs_1.Subject());

    /* istanbul ignore next */
    cov_238oyc4f67().s[72]++;
    this.addSubscription(this.reference$.pipe((0, rxjs_1.first)()).subscribe(async (reference) => {
      /* istanbul ignore next */
      cov_238oyc4f67().f[16]++;
      cov_238oyc4f67().s[73]++;

      if (this.status === AMQPConnectionStatus_1.AMQPConnectionStatus.CONNECTED) {
        /* istanbul ignore next */
        cov_238oyc4f67().b[6][0]++;
        cov_238oyc4f67().s[74]++;

        try {
          /* istanbul ignore next */
          cov_238oyc4f67().s[75]++;
          await reference.channel.assertExchange(this.config.exchange.name, this.config.exchange.type, this.config.exchange.options);

          /* istanbul ignore next */
          cov_238oyc4f67().s[76]++;

          for (let i =
          /* istanbul ignore next */
          (cov_238oyc4f67().s[77]++, 0); i < this.config.queues.length; i++) {
            /* istanbul ignore next */
            cov_238oyc4f67().s[78]++;

            if (this.config.queues[i].createBindings) {
              /* istanbul ignore next */
              cov_238oyc4f67().b[7][0]++;
              cov_238oyc4f67().s[79]++;
              await reference.channel.assertQueue(this.config.queues[i].name);

              /* istanbul ignore next */
              cov_238oyc4f67().s[80]++;
              this.logger.debug(`Declared the queue "${chalk.yellowBright(this.config.queues[i].name)}" for connection "${chalk.yellowBright(this.config.name)}"..`, AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');

              /* istanbul ignore next */
              cov_238oyc4f67().s[81]++;
              await reference.channel.bindQueue(this.config.queues[i].name, this.config.exchange.name, this.config.queues[i].routingKey);

              /* istanbul ignore next */
              cov_238oyc4f67().s[82]++;
              this.logger.debug(`Binded the queue "${chalk.yellowBright(this.config.queues[i].name)}" for connection "${chalk.yellowBright(this.config.name)}"..`, AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');
            } else
            /* istanbul ignore next */
            {
              cov_238oyc4f67().b[7][1]++;
            }
          }

          /* istanbul ignore next */
          cov_238oyc4f67().s[83]++;
          subject$.next();
        } catch (e) {}
      } else
      /* istanbul ignore next */
      {
        cov_238oyc4f67().b[6][1]++;
      }
    }));

    /* istanbul ignore next */
    cov_238oyc4f67().s[84]++;
    return subject$;
  }
  /**
   * Change status to a new value.
   *
   * @param {AMQPConnectionStatus} status
   */


  setStatus(status) {
    /* istanbul ignore next */
    cov_238oyc4f67().f[17]++;
    cov_238oyc4f67().s[85]++;
    this.status = status;

    /* istanbul ignore next */
    cov_238oyc4f67().s[86]++;
    this.status$.next(status);
  }
  /**
   * Subscribe to a queue returning an observable.
   *
   * Message will auto-acknowledge itself when emitted if not disabled.
   *
   * @param {AMQPSubscriber} subscriber Subscripton configuration object.
   *
   * @return {Subject<AMQPMessage>} Observable emitting new messages on arrival.
   */


  subscribe(subscriber) {
    /* istanbul ignore next */
    cov_238oyc4f67().f[18]++;
    const subject$ =
    /* istanbul ignore next */
    (cov_238oyc4f67().s[87]++, new rxjs_1.Subject()); //
    // Acquire connection reference.
    //

    /* istanbul ignore next */
    cov_238oyc4f67().s[88]++;
    this.reference$.subscribe((reference) => {
      /* istanbul ignore next */
      cov_238oyc4f67().f[19]++;
      cov_238oyc4f67().s[89]++;
      //
      // Start consuming (subscribing) new messages.
      //
      reference.channel.consume(subscriber.queue, (message) => {
        /* istanbul ignore next */
        cov_238oyc4f67().f[20]++;
        cov_238oyc4f67().s[90]++;
        this.logger.debug(`Subscribe emitted deliveryTag #${chalk.yellowBright(message.fields.deliveryTag)} for connection "${chalk.yellowBright(this.config.name)}"..`, AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER'); //
        // Emit the new message.
        //

        /* istanbul ignore next */
        cov_238oyc4f67().s[91]++;
        subject$.next(new AMQPMessage_1.AMQPMessage(message, () => {
          /* istanbul ignore next */
          cov_238oyc4f67().f[21]++;
          cov_238oyc4f67().s[92]++;
          // Lazy acknowledgement method.
          reference.channel.ack(message);
        })); //
        // Automatically acknowledge message if not otherwise set to true.
        //

        /* istanbul ignore next */
        cov_238oyc4f67().s[93]++;

        if (!subscriber.noAck) {
          /* istanbul ignore next */
          cov_238oyc4f67().b[8][0]++;
          cov_238oyc4f67().s[94]++;
          reference.channel.ack(message);
        } else
        /* istanbul ignore next */
        {
          cov_238oyc4f67().b[8][1]++;
        }
      });
    });

    /* istanbul ignore next */
    cov_238oyc4f67().s[95]++;
    return subject$;
  }
  /**
   * Perform an RPC call and return the response.
   *
   * Before performing the request a new queue will be generated
   * and subcribe to temporarily.
   *
   * **NOTE:** This call is susceptible to a timout (defaults to 5 seconds).
   *
   * @param {AMQPRPCCall} call RPC call configuration object.
   * @return {Subject<any>} Observable which emits a reply of type {T}.
   */


  rpcCall(call) {
    /* istanbul ignore next */
    cov_238oyc4f67().f[22]++;
    const subject$ =
    /* istanbul ignore next */
    (cov_238oyc4f67().s[96]++, new rxjs_1.Subject()); //
    // Calculate correlationId (used for mapping the sender
    // and receiver of a message across pub/sub sessions).
    //

    /* istanbul ignore next */
    cov_238oyc4f67().s[97]++;

    if (!call.options) {
      /* istanbul ignore next */
      cov_238oyc4f67().b[9][0]++;
      cov_238oyc4f67().s[98]++;
      call.options = {
        correlationId: (0, crypto_1.randomUUID)()
      };
    } else {
      /* istanbul ignore next */
      cov_238oyc4f67().b[9][1]++;
      cov_238oyc4f67().s[99]++;

      if (
      /* istanbul ignore next */
      (cov_238oyc4f67().b[11][0]++, call.options) &&
      /* istanbul ignore next */
      (cov_238oyc4f67().b[11][1]++, !call.options.correlationId)) {
        /* istanbul ignore next */
        cov_238oyc4f67().b[10][0]++;
        cov_238oyc4f67().s[100]++;
        call.options.correlationId = (0, crypto_1.randomUUID)();
      } else
      /* istanbul ignore next */
      {
        cov_238oyc4f67().b[10][1]++;
      }
    } //
    // Acquire the connection reference safely.
    //


    /* istanbul ignore next */
    cov_238oyc4f67().s[101]++;
    this.reference$.subscribe((reference) => {
      /* istanbul ignore next */
      cov_238oyc4f67().f[23]++;
      cov_238oyc4f67().s[102]++;
      this.logger.debug(`Sending RPC call to correlationId #${chalk.yellowBright(call.options.correlationId)} for connection "${chalk.yellowBright(this.config.name)}"..`, AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER'); //
      // Kick off the consumer first.
      //

      /* istanbul ignore next */
      cov_238oyc4f67().s[103]++;
      reference.channel.consume(call.queue, (message) => {
        /* istanbul ignore next */
        cov_238oyc4f67().f[24]++;
        cov_238oyc4f67().s[104]++;
        console.log(`a: ${message.content.toString()}`);

        /* istanbul ignore next */
        cov_238oyc4f67().s[105]++;
        subject$.next(new AMQPMessage_1.AMQPMessage(message));
      }, call.options); //
      // Publish the RPC message.
      //

      /* istanbul ignore next */
      cov_238oyc4f67().s[106]++;
      reference.channel.sendToQueue(call.queue, call.message, call.options);
      const timeout =
      /* istanbul ignore next */
      (cov_238oyc4f67().s[107]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_238oyc4f67().f[25]++;
        cov_238oyc4f67().s[108]++;
        console.log('timed out');
      }, call.timeout));
    });

    /* istanbul ignore next */
    cov_238oyc4f67().s[109]++;
    return subject$;
  }

  rpcConsume(queue, callback, options) {
    /* istanbul ignore next */
    cov_238oyc4f67().f[26]++;
    const subject$ =
    /* istanbul ignore next */
    (cov_238oyc4f67().s[110]++, new rxjs_1.Subject());

    /* istanbul ignore next */
    cov_238oyc4f67().s[111]++;
    this.reference$.subscribe(async (reference) => {
      /* istanbul ignore next */
      cov_238oyc4f67().f[27]++;
      cov_238oyc4f67().s[112]++;
      this.logger.debug(`RPC consuming queue "${chalk.yellowBright(queue)}" for connection "${chalk.yellowBright(this.config.name)}"..`, AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');

      /* istanbul ignore next */
      cov_238oyc4f67().s[113]++;
      await reference.channel.assertQueue(queue, {
        autoDelete: true
      });

      /* istanbul ignore next */
      cov_238oyc4f67().s[114]++;
      reference.channel.consume(queue, (message) => {
        /* istanbul ignore next */
        cov_238oyc4f67().f[28]++;
        cov_238oyc4f67().s[115]++;
        console.log(message);
        const reply =
        /* istanbul ignore next */
        (cov_238oyc4f67().s[116]++, callback(message));

        /* istanbul ignore next */
        cov_238oyc4f67().s[117]++;
        console.log(reply);

        /* istanbul ignore next */
        cov_238oyc4f67().s[118]++;
        reference.channel.sendToQueue(queue, Buffer.from(reply), {
          correlationId: message.properties.correlationId,
          replyTo: message.properties.replyTo
        });
      }, options);
    });

    /* istanbul ignore next */
    cov_238oyc4f67().s[119]++;
    return subject$;
  }

  addSubscription(subscription) {
    /* istanbul ignore next */
    cov_238oyc4f67().f[29]++;
    cov_238oyc4f67().s[120]++;
    this.subscriptions.push(subscription);
  }

  cancelActiveSubscriptions() {
    /* istanbul ignore next */
    cov_238oyc4f67().f[30]++;
    cov_238oyc4f67().s[121]++;
    this.subscriptions.forEach((subscription) => {
      /* istanbul ignore next */
      cov_238oyc4f67().f[31]++;
      cov_238oyc4f67().s[122]++;
      return subscription.unsubscribe();
    });
  }

}

/* istanbul ignore next */
cov_238oyc4f67().s[123]++;
exports.AMQPConnection = AMQPConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,