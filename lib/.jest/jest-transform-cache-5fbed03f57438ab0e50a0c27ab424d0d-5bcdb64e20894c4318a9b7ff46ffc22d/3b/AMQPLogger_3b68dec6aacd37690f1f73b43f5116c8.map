{"version":3,"sources":["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/logging/AMQPLogger.ts"],"names":[],"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","sourcesContent":["import { AMQPLogLevel } from './AMQPLogLevel';\nimport * as chalk from 'chalk';\nimport { cyan } from 'chalk';\nimport { Injectable } from '@nestjs/common';\nimport { AMQPConfig } from '../configuration/AMQPConfig';\n\n/**\n * Global log messaging.\n */\n@Injectable()\nexport class AMQPLogger {\n\n    /**\n     * List of colors mapped by log level value.\n     *\n     * @type {chalk.Chalk[]}\n     */\n    public static LOG_LEVEL_COLORS = [ cyan.redBright, cyan.yellowBright, cyan.magenta, cyan.gray ];\n\n    public static pad(str: string, padLeft = ' ') {\n\n        const pad = '                   ';\n\n        if (typeof str === 'undefined') {\n\n            return pad;\n\n        }\n\n        if (padLeft) {\n\n            return (pad + str).slice(-pad.length) + ' ';\n\n        } else {\n\n            return (str + pad).substring(0, pad.length) + ' ';\n\n        }\n\n    }\n\n    /**\n     * Main configuration for getting the log level from.\n     *\n     * @type {AMQPConfig}\n     */\n    public config: AMQPConfig;\n\n    /**\n     * console.log log messages.\n     *\n     * @param {AMQPLogLevel} logLevel Level to output.\n     * @param {string} message Message to emit.\n     * @param {string} emoji (optional) Emojis make life better.\n     * @param {string?} context (optional) context to prepend to message.\n     */\n    public log(logLevel: AMQPLogLevel, message: string, emoji?: string, context?: string): void {\n\n        if (this.config.logLevel >= logLevel) {\n\n            let str = `[${ chalk.cyan('@nestjs.pro/amqp') }] ${ chalk.gray(new Date().toLocaleString()) } `;\n\n            if (context) {\n\n                str += `${ chalk.bgGrey(AMQPLogger.pad(context)) } `;\n\n            }\n\n            str += `${ AMQPLogger.LOG_LEVEL_COLORS[ logLevel ](AMQPLogLevel[ logLevel ]) }: `;\n\n            if (emoji) {\n\n                str += `${ emoji }`;\n            }\n\n            console.log(`${ str } ${ message }`);\n\n        }\n\n    }\n\n    /**\n     * Wrapper method.\n     *\n     * @param {string} message Message to emit.\n     * @param {string} emoji (optional) Emojis make life better.\n     * @param {string?} context (optional) context to prepend to message.\n     */\n    public error(message: string, emoji?: string, context?: string): void {\n\n        this.log(AMQPLogLevel.ERROR, message, emoji, context);\n\n    }\n\n    /**\n     * Wrapper method.\n     *\n     * @param {string} message Message to emit.\n     * @param {string} emoji (optional) Emojis make life better.\n     * @param {string?} context (optional) context to prepend to message.\n     */\n    public info(message: string, emoji?: string, context?: string): void {\n\n        this.log(AMQPLogLevel.INFO, message, emoji, context);\n\n    }\n\n    /**\n     * Wrapper method.\n     *\n     * @param {string} message Message to emit.\n     * @param {string} emoji Emojis make life better.\n     * @param {string?} context Optional context to prepend to message.\n     */\n    public debug(message: string, emoji?: string, context?: string): void {\n\n        this.log(AMQPLogLevel.DEBUG, message, emoji, context);\n\n    }\n\n    /**\n     * Wrapper method.\n     *\n     * @param {string} message Message to emit.\n     * @param {string} emoji (optional) Emojis make life better.\n     * @param {string?} context (optional) context to prepend to message.\n     */\n    public trace(message: string, emoji?: string, context?: string): void {\n\n        this.log(AMQPLogLevel.TRACE, message, emoji, context);\n\n    }\n\n}\n"]}