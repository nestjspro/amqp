9bf2ce702b3dece47a0d162000dcac81
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AMQPService = void 0;
const common_1 = require("@nestjs/common");
const AMQPConnection_1 = require("./connections/AMQPConnection");
const AMQPConnectionNotFoundException_1 = require("./exceptions/AMQPConnectionNotFoundException");
const rxjs_1 = require("rxjs");
const AMQPLogger_1 = require("./logging/AMQPLogger");
const chalk = require("chalk");
const AMQPLogEmoji_1 = require("./logging/AMQPLogEmoji");
let AMQPService = class AMQPService {
    constructor(config, logger) {
        this.logger = logger;
        this.connections = [];
        this.config = config;
        this.logger.config = config;
        this.connect();
    }
    connect() {
        this.logger.debug('Creating connections..', AMQPLogEmoji_1.AMQPLogEmoji.NEW, 'SERVICE MANAGER');
        if (this.connections.length === 0) {
            for (let i = 0; i < this.config.connections.length; i++) {
                this.addConnection(this.config.connections[i]);
            }
        }
        else {
            for (let i = 0; i < this.connections.length; i++) {
                this.connections[i].connect();
            }
        }
    }
    disconnect() {
        for (let i = 0; i < this.connections.length; i++) {
            this.logger.debug(`Disconnecting from amqp server "${chalk.yellowBright(this.connections[i].config.name ? this.connections[i].config.name : '#0')}"`, AMQPLogEmoji_1.AMQPLogEmoji.DISCONNECT, 'SERVICE MANAGER');
            this.connections[i].disconnect();
        }
        this.logger.debug('All connections have been disconnected!', AMQPLogEmoji_1.AMQPLogEmoji.DISCONNECT, 'SERVICE MANAGER');
    }
    tearDown() {
        return (0, rxjs_1.forkJoin)(this.connections.map(connection => connection.tearDown()));
    }
    addConnection(config) {
        this.logger.debug(`Creating connection to amqp server "${chalk.yellowBright(config.name ? config.name : '#0')}"`, AMQPLogEmoji_1.AMQPLogEmoji.NEW, 'SERVICE MANAGER');
        const connection = new AMQPConnection_1.AMQPConnection(config, this.logger);
        this.connections.push(connection);
        return connection;
    }
    getConnection(name) {
        this.logger.trace(`Attempting to get connection "${chalk.yellowBright(name ? name : '#0')}"`, AMQPLogEmoji_1.AMQPLogEmoji.NEW, 'SERVICE MANAGER');
        const subject$ = new rxjs_1.ReplaySubject();
        if (name) {
            const connection = this.connections.find(connection => connection.config.name === name);
            if (connection) {
                this.logger.trace(`Retrieved connection "${chalk.yellowBright(connection.config.name)}"!`, AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'SERVICE MANAGER');
                subject$.next(connection);
            }
            else {
                throw new AMQPConnectionNotFoundException_1.AMQPConnectionNotFoundException(`There is no existing connection named "${chalk.yellowBright(name)}".`);
            }
        }
        else {
            if (this.connections && this.connections.length > 0) {
                this.logger.trace(`Retrieved connection ${chalk.yellowBright('#0!')}`, AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'SERVICE MANAGER');
                subject$.next(this.connections[0]);
            }
            else {
                throw new AMQPConnectionNotFoundException_1.AMQPConnectionNotFoundException('There are no connections.');
            }
        }
        return subject$;
    }
    onModuleDestroy() {
        this.logger.debug(chalk.magentaBright('Received shutdown signal, shutting down..'), AMQPLogEmoji_1.AMQPLogEmoji.SUCCESS, 'SERVICE MANAGER');
        this.disconnect();
    }
};
AMQPService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)('AMQP_CONFIG')),
    __metadata("design:paramtypes", [Object, AMQPLogger_1.AMQPLogger])
], AMQPService);
exports.AMQPService = AMQPService;
//# sourceMappingURL=AMQPService.js.map