{"version":3,"sources":["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/connections/AMQPConnection.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEI;;;;;;;;;;;;;;;;;AAlEJ,MAAA,IAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,SAAA,CAAA,CAAA;AAGA,MAAA,MAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAEA,MAAA,sBAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,wBAAA,CAAA,CAAA;AAEA,MAAA,KAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,OAAA,CAAA,CAAA;AACA,MAAA,WAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;AACA,MAAA,cAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;AACA,MAAA,aAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;AAGA,MAAA,QAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,QAAA,CAAA,CAAA;AAGA;;AAEG;;AACH,MAAa,cAAb,CAA2B;AA+CvB;;;;;AAKG;AACH,EAAA,WAAA,CAAmB,MAAnB,EAAiE,MAAjE,EAAmF;AAAA;AAAA;AAAA;AAAlB,SAAA,MAAA,GAAA,MAAA;AA5CjE;;;;AAIG;;AAwCgF;AAAA;AAvC5E,SAAA,OAAA,GAA+C,IAAI,MAAA,CAAA,aAAJ,EAA/C;AASP;;;;AAIG;;AA0BgF;AAAA;AAzB5E,SAAA,UAAA,GAA2C,IAAI,MAAA,CAAA,aAAJ,EAA3C;AAUP;;;;;;AAMG;;AASgF;AAAA;AAR3E,SAAA,aAAA,GAAqC,EAArC;;AAQ2E;AAAA;AAE/E,SAAK,MAAL,CAAY,KAAZ,CAAkB,kCAAmC,KAAK,CAAC,YAAN,CAAmB,MAAM,CAAC,IAA1B,CAAgC,KAArF,EAA4F,cAAA,CAAA,YAAA,CAAa,GAAzG,EAA8G,oBAA9G;;AAF+E;AAAA;AAI/E,SAAK,MAAL,GAAc,sBAAA,CAAA,oBAAA,CAAqB,YAAnC;;AAJ+E;AAAA;AAK/E,SAAK,KAAL,GAAa,IAAI,WAAA,CAAA,SAAJ,CAAc,IAAd,CAAb;;AAL+E;AAAA;AAM/E,SAAK,MAAL,GAAc,MAAd;;AAN+E;AAAA;AAQ/E,SAAK,OAAL;AAEH;AAED;;;;AAIG;;;AACI,EAAA,OAAO,GAAA;AAAA;AAAA;AAAA;AAEV,SAAK,OAAL,CAAa,IAAb,CAAkB,sBAAA,CAAA,oBAAA,CAAqB,UAAvC,EAFU,CAIV;AACA;AACA;;AANU;AAAA;AAOV,SAAK,eAAL,CAAqB,KAAK,OAAL,CAAa,SAAb,CAAuB,CAAA,MAAM,KAAG;AAAA;AAAA;AAAA;AAEjD,WAAK,MAAL,CAAY,KAAZ,CAAkB,gCAAiC,KAAK,CAAC,WAAN,CAAkB,MAAlB,CAA0B,oBAAqB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,IAAvI,EAA6I,cAAA,CAAA,YAAA,CAAa,QAA1J,EAAoK,QAApK;;AAFiD;AAAA;;AAIjD,UAAI,MAAM,KAAK,sBAAA,CAAA,oBAAA,CAAqB,SAApC,EAA+C;AAAA;AAAA;AAAA;AAE3C,aAAK,yBAAL;AAEH,OAJD;AAAA;AAAA;AAAA;AAAA;AAMH,KAVoB,CAArB;;AAPU;AAAA;;AAmBV,QAAI;AAAA;AAAA;AAEA,MAAA,IAAI,CAAC,OAAL,CAAa,KAAK,MAAL,CAAY,GAAzB,EAA8B;AAAE,QAAA,OAAO;AAAE;AAAA,yCAAK,MAAL,CAAY,OAAZ;AAAA;AAAA,oCAAuB,IAAvB;AAAX,OAA9B,EAAwE,IAAxE,CAA6E,OAAM,UAAN,KAAmB;AAAA;AAAA;AAAA;AAE5F,QAAA,UAAU,CAAC,EAAX,CAAc,OAAd,EAAuB,MAAK;AAAA;AAAA;AAAA;AAExB,eAAK,MAAL,CAAY,KAAZ,CAAkB,iBAAkB,KAAK,CAAC,WAAN,CAAkB,QAAlB,CAA4B,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,IAA3H,EAAiI,cAAA,CAAA,YAAA,CAAa,QAA9I,EAAwJ,QAAxJ;AAEH,SAJD;;AAF4F;AAAA;AAQ5F,QAAA,UAAU,CAAC,EAAX,CAAc,OAAd,EAAuB,OAAM,KAAN,KAAc;AAAA;AAAA;AAAA;AAEjC,eAAK,MAAL,CAAY,KAAZ,CAAkB,iBAAkB,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAA2B,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,IAA1H,EAAgI,cAAA,CAAA,YAAA,CAAa,QAA7I,EAAuJ,QAAvJ;;AAFiC;AAAA;AAIjC,gBAAM,KAAK,SAAL,EAAN;AAEH,SAND;;AAR4F;AAAA;AAgB5F,QAAA,UAAU,CAAC,EAAX,CAAc,SAAd,EAAyB,CAAA,MAAM,KAAG;AAAA;AAAA;AAAA;AAE9B,eAAK,MAAL,CAAY,KAAZ,CAAkB,iBAAkB,KAAK,CAAC,WAAN,CAAkB,SAAlB,CAA6B,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,IAA5H,EAAkI,cAAA,CAAA,YAAA,CAAa,QAA/I,EAAyJ,QAAzJ;AAEH,SAJD;;AAhB4F;AAAA;AAsB5F,QAAA,UAAU,CAAC,EAAX,CAAc,WAAd,EAA2B,MAAK;AAAA;AAAA;AAAA;AAE5B,eAAK,MAAL,CAAY,KAAZ,CAAkB,iBAAkB,KAAK,CAAC,WAAN,CAAkB,WAAlB,CAA+B,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,IAA9H,EAAoI,cAAA,CAAA,YAAA,CAAa,QAAjJ,EAA2J,QAA3J;AAEH,SAJD;;AAtB4F;AAAA;AA4B5F,QAAA,UAAU,CAAC,EAAX,CAAc,OAAd,EAAuB,MAAK;AAAA;AAAA;AAAA;AAExB,eAAK,MAAL,CAAY,KAAZ,CAAkB,iBAAkB,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAA2B,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,IAA1H,EAAgI,cAAA,CAAA,YAAA,CAAa,QAA7I,EAAuJ,QAAvJ;AAEH,SAJD;;AA5B4F;AAAA;AAkC5F,QAAA,UAAU,CAAC,EAAX,CAAc,QAAd,EAAwB,CAAA,OAAO,KAAG;AAAA;AAAA;AAAA;AAE9B,eAAK,MAAL,CAAY,KAAZ,CAAkB,iBAAkB,KAAK,CAAC,WAAN,CAAkB,SAAlB,CAA6B,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,IAA5H,EAAkI,cAAA,CAAA,YAAA,CAAa,QAA/I,EAAyJ,QAAzJ;AAEH,SAJD;AAMA,cAAM,OAAO;AAAA;AAAA,kCAAG,MAAM,UAAU,CAAC,aAAX,EAAT,CAAb;;AAxC4F;AAAA;AAyC5F,cAAM,OAAO,CAAC,QAAR,CAAiB,CAAC,CAAC,KAAK,MAAL,CAAY,QAAd;AAAA;AAAA,oCAAyB,KAAK,MAAL,CAAY,QAArC;AAAA;AAAA,oCAAgD,CAAhD,CAAjB,CAAN;;AAzC4F;AAAA;AA2C5F,aAAK,SAAL,GAAiB;AAAE,UAAA,UAAF;AAAc,UAAA;AAAd,SAAjB;;AA3C4F;AAAA;AA4C5F,aAAK,UAAL,CAAgB,IAAhB,CAAqB;AAAE,UAAA,UAAF;AAAc,UAAA;AAAd,SAArB;;AA5C4F;AAAA;AA8C5F,aAAK,SAAL,CAAe,sBAAA,CAAA,oBAAA,CAAqB,SAApC;;AA9C4F;AAAA;AAgD5F,aAAK,eAAL,CAAqB,KAAK,gBAAL,GAAwB,SAAxB,CAAkC,MAAK;AAAA;AAAA;AAAA;AAExD,eAAK,MAAL,CAAY,IAAZ,CAAiB,oBAAqB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,aAA3E,EAA0F,cAAA,CAAA,YAAA,CAAa,OAAvG,EAAgH,oBAAhH;AAEH,SAJoB,CAArB;AAMH,OAtDD;;AAFA;AAAA;AA0DA,aAAO,KAAK,UAAZ;AAEH,KA5DD,CA4DE,OAAO,CAAP,EAAU;AAAA;AAAA;AAER,WAAK,SAAL,CAAe,sBAAA,CAAA,oBAAA,CAAqB,YAApC;;AAFQ;AAAA;AAIR,MAAA,OAAO,CAAC,GAAR,CAAY,CAAZ;AAEH;AAEJ;AAED;;;;;AAKG;;;AACoB,QAAV,UAAU,GAAA;AAAA;AAAA;AAAA;AAEnB,SAAK,yBAAL;;AAFmB;AAAA;AAInB,SAAK,SAAL,CAAe,sBAAA,CAAA,oBAAA,CAAqB,YAApC;;AAJmB;AAAA;;AAMnB,QAAI,KAAK,SAAT,EAAoB;AAAA;AAAA;AAAA;;AAEhB,UAAI,KAAK,SAAL,CAAe,OAAnB,EAA4B;AAAA;AAAA;AAAA;AAExB,cAAM,KAAK,SAAL,CAAe,OAAf,CAAuB,KAAvB,EAAN;AAEH,OAJD;AAAA;AAAA;AAAA;AAAA;;AAFgB;;AAQhB,UAAI,KAAK,SAAL,CAAe,UAAnB,EAA+B;AAAA;AAAA;AAAA;AAE3B,cAAM,KAAK,SAAL,CAAe,UAAf,CAA0B,KAA1B,EAAN;AAEH,OAJD;AAAA;AAAA;AAAA;AAAA;;AARgB;AAchB,WAAK,SAAL,GAAiB,IAAjB;AAEH,KAhBD;AAAA;AAAA;AAAA;AAAA;AAkBH;;AAEqB,QAAT,SAAS,GAAA;AAAA;AAAA;AAAA;AAElB,UAAM,KAAK,UAAL,EAAN;;AAFkB;AAAA;AAGlB,UAAM,KAAK,OAAL,EAAN;AAEH;;AAEM,EAAA,QAAQ,GAAA;AAAA;AAAA;AAAA;AAEX,SAAK,MAAL,CAAY,KAAZ,CAAkB,+CAAgD,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,KAAvG;AAEA,UAAM,QAAQ;AAAA;AAAA,8BAAkB,IAAI,MAAA,CAAA,OAAJ,EAAlB,CAAd;;AAJW;AAAA;AAMX,SAAK,UAAL,CAAgB,SAAhB,CAA0B,OAAM,SAAN,KAAkB;AAAA;AAAA;AAAA;;AAExC,WAAK,IAAI,CAAC;AAAA;AAAA,gCAAG,CAAH,CAAV,EAAgB,CAAC,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAvC,EAA+C,CAAC,EAAhD,EAAoD;AAAA;AAAA;AAEhD,aAAK,MAAL,CAAY,KAAZ,CAAkB,mBAAoB,KAAK,MAAL,CAAY,MAAZ,CAAoB,CAApB,EAAwB,IAAK,yBAA0B,KAAK,MAAL,CAAY,IAAK,KAA9G,EAAqH,cAAA,CAAA,YAAA,CAAa,UAAlI,EAA8I,oBAA9I;;AAFgD;AAAA;AAIhD,cAAM,SAAS,CAAC,OAAV,CAAkB,WAAlB,CAA8B,KAAK,MAAL,CAAY,MAAZ,CAAoB,CAApB,EAAwB,IAAtD,CAAN;AAEH;;AARuC;AAAA;AAUxC,WAAK,MAAL,CAAY,KAAZ,CAAkB,mBAAoB,KAAK,MAAL,CAAY,QAAZ,CAAqB,IAAK,yBAA0B,KAAK,MAAL,CAAY,IAAK,KAA3G,EAAkH,cAAA,CAAA,YAAA,CAAa,UAA/H,EAA2I,oBAA3I;;AAVwC;AAAA;AAYxC,YAAM,SAAS,CAAC,OAAV,CAAkB,cAAlB,CAAiC,KAAK,MAAL,CAAY,QAAZ,CAAqB,IAAtD,CAAN;;AAZwC;AAAA;AAcxC,MAAA,QAAQ,CAAC,IAAT;AAEH,KAhBD;;AANW;AAAA;AAwBX,WAAO,QAAP;AAEH;AAED;;;;;;AAMG;;;AACI,EAAA,gBAAgB,GAAA;AAAA;AAAA;AAAA;AAEnB,SAAK,MAAL,CAAY,KAAZ,CAAkB,4CAA6C,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,KAApG,EAA2G,cAAA,CAAA,YAAA,CAAa,GAAxH,EAA6H,oBAA7H;AAEA,UAAM,QAAQ;AAAA;AAAA,8BAAkB,IAAI,MAAA,CAAA,OAAJ,EAAlB,CAAd;;AAJmB;AAAA;AAMnB,SAAK,eAAL,CAAqB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,CAAA,GAAA,MAAA,CAAA,KAAA,GAArB,EAA8B,SAA9B,CAAwC,OAAM,SAAN,KAAkB;AAAA;AAAA;AAAA;;AAE3E,UAAI,KAAK,MAAL,KAAgB,sBAAA,CAAA,oBAAA,CAAqB,SAAzC,EAAoD;AAAA;AAAA;AAAA;;AAEhD,YAAI;AAAA;AAAA;AAEA,gBAAM,SAAS,CAAC,OAAV,CAAkB,cAAlB,CAAiC,KAAK,MAAL,CAAY,QAAZ,CAAqB,IAAtD,EAA4D,KAAK,MAAL,CAAY,QAAZ,CAAqB,IAAjF,EAAuF,KAAK,MAAL,CAAY,QAAZ,CAAqB,OAA5G,CAAN;;AAFA;AAAA;;AAKA,eAAK,IAAI,CAAC;AAAA;AAAA,oCAAG,CAAH,CAAV,EAAgB,CAAC,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAvC,EAA+C,CAAC,EAAhD,EAAoD;AAAA;AAAA;;AAEhD,gBAAI,KAAK,MAAL,CAAY,MAAZ,CAAoB,CAApB,EAAwB,cAA5B,EAA4C;AAAA;AAAA;AAAA;AAExC,oBAAM,SAAS,CAAC,OAAV,CAAkB,WAAlB,CAA8B,KAAK,MAAL,CAAY,MAAZ,CAAoB,CAApB,EAAwB,IAAtD,CAAN;;AAFwC;AAAA;AAGxC,mBAAK,MAAL,CAAY,KAAZ,CAAkB,uBAAwB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,MAAZ,CAAoB,CAApB,EAAwB,IAA3C,CAAiD,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,KAAtJ,EAA6J,cAAA,CAAA,YAAA,CAAa,OAA1K,EAAmL,oBAAnL;;AAHwC;AAAA;AAKxC,oBAAM,SAAS,CAAC,OAAV,CAAkB,SAAlB,CAA4B,KAAK,MAAL,CAAY,MAAZ,CAAoB,CAApB,EAAwB,IAApD,EAA0D,KAAK,MAAL,CAAY,QAAZ,CAAqB,IAA/E,EAAqF,KAAK,MAAL,CAAY,MAAZ,CAAoB,CAApB,EAAwB,UAA7G,CAAN;;AALwC;AAAA;AAMxC,mBAAK,MAAL,CAAY,KAAZ,CAAkB,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,MAAZ,CAAoB,CAApB,EAAwB,IAA3C,CAAiD,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,KAApJ,EAA2J,cAAA,CAAA,YAAA,CAAa,OAAxK,EAAiL,oBAAjL;AAEH,aARD;AAAA;AAAA;AAAA;AAAA;AAUH;;AAjBD;AAAA;AAmBA,UAAA,QAAQ,CAAC,IAAT;AAEH,SArBD,CAqBE,OAAO,CAAP,EAAU,CAGX;AACJ,OA3BD;AAAA;AAAA;AAAA;AAAA;AA6BH,KA/BoB,CAArB;;AANmB;AAAA;AAuCnB,WAAO,QAAP;AAEH;AAED;;;;AAIG;;;AACI,EAAA,SAAS,CAAC,MAAD,EAA6B;AAAA;AAAA;AAAA;AAEzC,SAAK,MAAL,GAAc,MAAd;;AAFyC;AAAA;AAIzC,SAAK,OAAL,CAAa,IAAb,CAAkB,MAAlB;AAEH;AAED;;;;;;;;AAQG;;;AACI,EAAA,SAAS,CAAC,UAAD,EAA2B;AAAA;AAAA;AAEvC,UAAM,QAAQ;AAAA;AAAA,8BAA8B,IAAI,MAAA,CAAA,OAAJ,EAA9B,CAAd,CAFuC,CAIvC;AACA;AACA;;AANuC;AAAA;AAOvC,SAAK,UAAL,CAAgB,SAAhB,CAA0B,CAAA,SAAS,KAAG;AAAA;AAAA;AAAA;AAElC;AACA;AACA;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,OAAlB,CAA0B,UAAU,CAAC,KAArC,EAA4C,CAAA,OAAO,KAAG;AAAA;AAAA;AAAA;AAElD,aAAK,MAAL,CAAY,KAAZ,CAAkB,kCAAmC,KAAK,CAAC,YAAN,CAAmB,OAAO,CAAC,MAAR,CAAe,WAAlC,CAA+C,oBAAqB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,KAA9J,EAAqK,cAAA,CAAA,YAAA,CAAa,OAAlL,EAA2L,oBAA3L,EAFkD,CAIlD;AACA;AACA;;AANkD;AAAA;AAOlD,QAAA,QAAQ,CAAC,IAAT,CAAc,IAAI,aAAA,CAAA,WAAJ,CAAqB,OAArB,EAA8B,MAAK;AAAA;AAAA;AAAA;AAE7C;AACA,UAAA,SAAS,CAAC,OAAV,CAAkB,GAAlB,CAAsB,OAAtB;AAEH,SALa,CAAd,EAPkD,CAclD;AACA;AACA;;AAhBkD;AAAA;;AAiBlD,YAAI,CAAC,UAAU,CAAC,KAAhB,EAAuB;AAAA;AAAA;AAAA;AAEnB,UAAA,SAAS,CAAC,OAAV,CAAkB,GAAlB,CAAsB,OAAtB;AAEH,SAJD;AAAA;AAAA;AAAA;AAAA;AAMH,OAvBD;AAyBH,KA9BD;;AAPuC;AAAA;AAuCvC,WAAO,QAAP;AAEH;AAED;;;;;;;;;;AAUG;;;AACI,EAAA,OAAO,CAAI,IAAJ,EAAqB;AAAA;AAAA;AAE/B,UAAM,QAAQ;AAAA;AAAA,8BAA4B,IAAI,MAAA,CAAA,OAAJ,EAA5B,CAAd,CAF+B,CAI/B;AACA;AACA;AACA;;AAP+B;AAAA;;AAQ/B,QAAI,CAAC,IAAI,CAAC,OAAV,EAAmB;AAAA;AAAA;AAAA;AAEf,MAAA,IAAI,CAAC,OAAL,GAAe;AAAE,QAAA,aAAa,EAAE,CAAA,GAAA,QAAA,CAAA,UAAA;AAAjB,OAAf;AAEH,KAJD,MAIO;AAAA;AAAA;AAAA;;AAAA;AAAI;AAAA,mCAAA,IAAI,CAAC,OAAL;AAAA;AAAA,mCAAgB,CAAC,IAAI,CAAC,OAAL,CAAa,aAA9B,CAAJ,EAAiD;AAAA;AAAA;AAAA;AAEpD,QAAA,IAAI,CAAC,OAAL,CAAa,aAAb,GAA6B,CAAA,GAAA,QAAA,CAAA,UAAA,GAA7B;AAEH,OAJM;AAAA;AAAA;AAAA;AAAA;AAIN,KAhB8B,CAkB/B;AACA;AACA;;;AApB+B;AAAA;AAqB/B,SAAK,UAAL,CAAgB,SAAhB,CAA0B,CAAA,SAAS,KAAG;AAAA;AAAA;AAAA;AAElC,WAAK,MAAL,CAAY,KAAZ,CAAkB,sCAAuC,KAAK,CAAC,YAAN,CAAmB,IAAI,CAAC,OAAL,CAAa,aAAhC,CAA+C,oBAAqB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,KAAlK,EAAyK,cAAA,CAAA,YAAA,CAAa,OAAtL,EAA+L,oBAA/L,EAFkC,CAIlC;AACA;AACA;;AANkC;AAAA;AAOlC,MAAA,SAAS,CAAC,OAAV,CAAkB,OAAlB,CAA0B,IAAI,CAAC,KAA/B,EAAsC,CAAA,OAAO,KAAG;AAAA;AAAA;AAAA;AAE5C,QAAA,OAAO,CAAC,GAAR,CAAY,MAAO,OAAO,CAAC,OAAR,CAAgB,QAAhB,EAA2B,EAA9C;;AAF4C;AAAA;AAI5C,QAAA,QAAQ,CAAC,IAAT,CAAc,IAAI,aAAA,CAAA,WAAJ,CAAmB,OAAnB,CAAd;AAEH,OAND,EAMG,IAAI,CAAC,OANR,EAPkC,CAelC;AACA;AACA;;AAjBkC;AAAA;AAkBlC,MAAA,SAAS,CAAC,OAAV,CAAkB,WAAlB,CAA8B,IAAI,CAAC,KAAnC,EAA0C,IAAI,CAAC,OAA/C,EAAwD,IAAI,CAAC,OAA7D;AAEA,YAAM,OAAO;AAAA;AAAA,iCAAG,UAAU,CAAC,MAAK;AAAA;AAAA;AAAA;AAE5B,QAAA,OAAO,CAAC,GAAR,CAAY,WAAZ;AAEH,OAJyB,EAIvB,IAAI,CAAC,OAJkB,CAAb,CAAb;AAMH,KA1BD;;AArB+B;AAAA;AAiD/B,WAAO,QAAP;AAEH;;AAEM,EAAA,UAAU,CAAI,KAAJ,EAAmB,QAAnB,EAAuC,OAAvC,EAAwD;AAAA;AAAA;AAErE,UAAM,QAAQ;AAAA;AAAA,+BAAe,IAAI,MAAA,CAAA,OAAJ,EAAf,CAAd;;AAFqE;AAAA;AAIrE,SAAK,UAAL,CAAgB,SAAhB,CAA0B,OAAM,SAAN,KAAkB;AAAA;AAAA;AAAA;AAExC,WAAK,MAAL,CAAY,KAAZ,CAAkB,wBAAyB,KAAK,CAAC,YAAN,CAAmB,KAAnB,CAA0B,qBAAsB,KAAK,CAAC,YAAN,CAAmB,KAAK,MAAL,CAAY,IAA/B,CAAqC,KAAhI,EAAuI,cAAA,CAAA,YAAA,CAAa,OAApJ,EAA6J,oBAA7J;;AAFwC;AAAA;AAIxC,YAAM,SAAS,CAAC,OAAV,CAAkB,WAAlB,CAA8B,KAA9B,EAAqC;AAAE,QAAA,UAAU,EAAE;AAAd,OAArC,CAAN;;AAJwC;AAAA;AAMxC,MAAA,SAAS,CAAC,OAAV,CAAkB,OAAlB,CAA0B,KAA1B,EAAiC,CAAA,OAAO,KAAG;AAAA;AAAA;AAAA;AAEvC,QAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AAEA,cAAM,KAAK;AAAA;AAAA,mCAAG,QAAQ,CAAC,OAAD,CAAX,CAAX;;AAJuC;AAAA;AAOvC,QAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;;AAPuC;AAAA;AAQvC,QAAA,SAAS,CAAC,OAAV,CAAkB,WAAlB,CAA8B,KAA9B,EAAqC,MAAM,CAAC,IAAP,CAAY,KAAZ,CAArC,EAAyD;AAErD,UAAA,aAAa,EAAE,OAAO,CAAC,UAAR,CAAmB,aAFmB;AAGrD,UAAA,OAAO,EAAE,OAAO,CAAC,UAAR,CAAmB;AAHyB,SAAzD;AAOH,OAfD,EAeG,OAfH;AAiBH,KAvBD;;AAJqE;AAAA;AA6BrE,WAAO,QAAP;AAEH;;AAEM,EAAA,eAAe,CAAC,YAAD,EAA2B;AAAA;AAAA;AAAA;AAE7C,SAAK,aAAL,CAAmB,IAAnB,CAAwB,YAAxB;AAGH;;AAEM,EAAA,yBAAyB,GAAA;AAAA;AAAA;AAAA;AAE5B,SAAK,aAAL,CAAmB,OAAnB,CAA2B,CAAA,YAAY,KAAI;AAAA;AAAA;AAAA;AAAA,aAAA,YAAY,CAAC,WAAb;AAA0B,KAArE;AAEH;;AAjcsB;;;;AAA3B,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["import * as amqp from 'amqplib';\nimport { Replies } from 'amqplib';\nimport { AMQPConfigConnection } from '../configuration/AMQPConfigConnection';\nimport { ReplaySubject, BehaviorSubject, Subject, Subscription, first } from 'rxjs';\nimport { AMQPReference } from '../AMQPReference';\nimport { AMQPConnectionStatus } from './AMQPConnectionStatus';\nimport { AMQPLogger } from '../logging/AMQPLogger';\nimport * as chalk from 'chalk';\nimport { AMQPQueue } from '../queueing/AMQPQueue';\nimport { AMQPLogEmoji } from '../logging/AMQPLogEmoji';\nimport { AMQPMessage } from '../queueing/AMQPMessage';\nimport { AMQPSubscriber } from '../queueing/AMQPSubscriber';\nimport { AMQPRPCCall } from '../queueing/AMQPRPCCall';\nimport { randomUUID } from 'crypto';\nimport Consume = Replies.Consume;\n\n/**\n * AMQP individual connection class.\n */\nexport class AMQPConnection {\n\n    /**\n     * Connection status.\n     *\n     * @type {AMQPConnectionStatus}\n     */\n    public status: AMQPConnectionStatus;\n\n    /**\n     * Connection status event change observable.\n     *\n     * @type {BehaviorSubject<AMQPConnectionStatus>}\n     */\n    public status$: ReplaySubject<AMQPConnectionStatus> = new ReplaySubject();\n\n    /**\n     * Connection configuration settings.\n     *\n     * @type {AMQPConfigConnection}\n     */\n    public config: AMQPConfigConnection;\n\n    /**\n     * References to the connection and channel for this connection.\n     *\n     * @type {ReplaySubject<AMQPReference>}\n     */\n    public reference$: ReplaySubject<AMQPReference> = new ReplaySubject();\n    public reference: AMQPReference;\n\n    /**\n     * Queue for managing message delivery.\n     *\n     * @type {AMQPQueue}\n     */\n    public queue: AMQPQueue;\n\n    /**\n     * Maintain a list of active observable subscriptions so\n     * they can be cancelled later in the event of a state change.\n     *\n     * @type {Subscription}\n     * @private\n     */\n    private subscriptions: Array<Subscription> = [];\n\n    /**\n     * AMQP individual connection class constructor (requires a configuration object).\n     *\n     * @param {AMQPConfigConnection} config\n     * @param {AMQPLogger} logger\n     */\n    public constructor(config: AMQPConfigConnection, public readonly logger: AMQPLogger) {\n\n        this.logger.trace(`Instantiating AMQP connection \"${ chalk.yellowBright(config.name) }\"..`, AMQPLogEmoji.NEW, 'CONNECTION MANAGER');\n\n        this.status = AMQPConnectionStatus.DISCONNECTED;\n        this.queue = new AMQPQueue(this);\n        this.config = config;\n\n        this.connect();\n\n    }\n\n    /**\n     * Connect to the AMQP server.\n     *\n     * @returns {ReplaySubject<AMQPReference>}\n     */\n    public connect(): ReplaySubject<AMQPReference> {\n\n        this.status$.next(AMQPConnectionStatus.CONNECTING);\n\n        //\n        // Subscribe to status changes so we can log them.\n        //\n        this.addSubscription(this.status$.subscribe(status => {\n\n            this.logger.debug(`Connection status changed to ${ chalk.greenBright(status) } for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'STATUS');\n\n            if (status !== AMQPConnectionStatus.CONNECTED) {\n\n                this.cancelActiveSubscriptions();\n\n            }\n\n        }));\n\n        try {\n\n            amqp.connect(this.config.url, { timeout: this.config.timeout || 5000 }).then(async connection => {\n\n                connection.on('close', () => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('CLOSED') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                connection.on('error', async error => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('ERROR') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                    await this.reconnect();\n\n                });\n\n                connection.on('blocked', reason => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('BLOCKED') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                connection.on('unblocked', () => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('UNBLOCKED') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                connection.on('drain', () => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('DRAIN') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                connection.on('return', message => {\n\n                    this.logger.debug(`Server said: \"${ chalk.greenBright('MESSAGE') }\" for connection \"${ chalk.yellowBright(this.config.name) }\".`, AMQPLogEmoji.SETTINGS, 'SERVER');\n\n                });\n\n                const channel = await connection.createChannel();\n                await channel.prefetch(!!this.config.prefetch ? this.config.prefetch : 1);\n\n                this.reference = { connection, channel };\n                this.reference$.next({ connection, channel });\n\n                this.setStatus(AMQPConnectionStatus.CONNECTED);\n\n                this.addSubscription(this.declareResources().subscribe(() => {\n\n                    this.logger.info(`AMQP connection \"${ chalk.yellowBright(this.config.name) }\" is ready!`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n                }));\n\n            });\n\n            return this.reference$;\n\n        } catch (e) {\n\n            this.setStatus(AMQPConnectionStatus.DISCONNECTED);\n\n            console.log(e);\n\n        }\n\n    }\n\n    /**\n     * Disconnect from the AMQP server.\n     * (This does not remove any resources such as queues, exchanges, etc..)\n     *\n     * @author Matthew Davis <matthew@matthewdavis.io\n     */\n    public async disconnect(): Promise<void> {\n\n        this.cancelActiveSubscriptions();\n\n        this.setStatus(AMQPConnectionStatus.DISCONNECTED);\n\n        if (this.reference) {\n\n            if (this.reference.channel) {\n\n                await this.reference.channel.close();\n\n            }\n\n            if (this.reference.connection) {\n\n                await this.reference.connection.close();\n\n            }\n\n            this.reference = null;\n\n        }\n\n    }\n\n    public async reconnect(): Promise<void> {\n\n        await this.disconnect();\n        await this.connect();\n\n    }\n\n    public tearDown(): Subject<void> {\n\n        this.logger.debug(`Tearing down AMQP resources for connection \"${ chalk.yellowBright(this.config.name) }\"..`);\n\n        const subject$: Subject<void> = new Subject();\n\n        this.reference$.subscribe(async reference => {\n\n            for (let i = 0; i < this.config.queues.length; i++) {\n\n                this.logger.debug(`Deleting queue \"${ this.config.queues[ i ].name }\" on AMQP connection \"${ this.config.name }\"..`, AMQPLogEmoji.DISCONNECT, 'CONNECTION MANAGER');\n\n                await reference.channel.deleteQueue(this.config.queues[ i ].name);\n\n            }\n\n            this.logger.debug(`Deleting queue \"${ this.config.exchange.name }\" on AMQP connection \"${ this.config.name }\"..`, AMQPLogEmoji.DISCONNECT, 'CONNECTION MANAGER');\n\n            await reference.channel.deleteExchange(this.config.exchange.name);\n\n            subject$.next();\n\n        });\n\n        return subject$;\n\n    }\n\n    /**\n     * Declare exchange and queue(s) then setup bindings.\n     *\n     * @author Matthew Davis <matthew@matthewdavis.io>\n     *\n     * @returns {Subject<void>} Observable emitted when complete.\n     */\n    public declareResources(): Subject<void> {\n\n        this.logger.debug(`Declaring AMQP resources for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.NEW, 'CONNECTION MANAGER');\n\n        const subject$: Subject<void> = new Subject();\n\n        this.addSubscription(this.reference$.pipe(first()).subscribe(async reference => {\n\n            if (this.status === AMQPConnectionStatus.CONNECTED) {\n\n                try {\n\n                    await reference.channel.assertExchange(this.config.exchange.name, this.config.exchange.type, this.config.exchange.options);\n\n\n                    for (let i = 0; i < this.config.queues.length; i++) {\n\n                        if (this.config.queues[ i ].createBindings) {\n\n                            await reference.channel.assertQueue(this.config.queues[ i ].name);\n                            this.logger.debug(`Declared the queue \"${ chalk.yellowBright(this.config.queues[ i ].name) }\" for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n                            await reference.channel.bindQueue(this.config.queues[ i ].name, this.config.exchange.name, this.config.queues[ i ].routingKey);\n                            this.logger.debug(`Binded the queue \"${ chalk.yellowBright(this.config.queues[ i ].name) }\" for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n                        }\n\n                    }\n\n                    subject$.next();\n\n                } catch (e) {\n\n\n                }\n            }\n\n        }));\n\n        return subject$;\n\n    }\n\n    /**\n     * Change status to a new value.\n     *\n     * @param {AMQPConnectionStatus} status\n     */\n    public setStatus(status: AMQPConnectionStatus): void {\n\n        this.status = status;\n\n        this.status$.next(status);\n\n    }\n\n    /**\n     * Subscribe to a queue returning an observable.\n     *\n     * Message will auto-acknowledge itself when emitted if not disabled.\n     *\n     * @param {AMQPSubscriber} subscriber Subscripton configuration object.\n     *\n     * @return {Subject<AMQPMessage>} Observable emitting new messages on arrival.\n     */\n    public subscribe(subscriber: AMQPSubscriber): Subject<AMQPMessage<any>> {\n\n        const subject$: Subject<AMQPMessage<any>> = new Subject();\n\n        //\n        // Acquire connection reference.\n        //\n        this.reference$.subscribe(reference => {\n\n            //\n            // Start consuming (subscribing) new messages.\n            //\n            reference.channel.consume(subscriber.queue, message => {\n\n                this.logger.debug(`Subscribe emitted deliveryTag #${ chalk.yellowBright(message.fields.deliveryTag) } for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n                //\n                // Emit the new message.\n                //\n                subject$.next(new AMQPMessage<any>(message, () => {\n\n                    // Lazy acknowledgement method.\n                    reference.channel.ack(message);\n\n                }));\n\n                //\n                // Automatically acknowledge message if not otherwise set to true.\n                //\n                if (!subscriber.noAck) {\n\n                    reference.channel.ack(message);\n\n                }\n\n            });\n\n        });\n\n        return subject$;\n\n    }\n\n    /**\n     * Perform an RPC call and return the response.\n     *\n     * Before performing the request a new queue will be generated\n     * and subcribe to temporarily.\n     *\n     * **NOTE:** This call is susceptible to a timout (defaults to 5 seconds).\n     *\n     * @param {AMQPRPCCall} call RPC call configuration object.\n     * @return {Subject<any>} Observable which emits a reply of type {T}.\n     */\n    public rpcCall<T>(call: AMQPRPCCall): Subject<AMQPMessage<T>> {\n\n        const subject$: Subject<AMQPMessage<T>> = new Subject();\n\n        //\n        // Calculate correlationId (used for mapping the sender\n        // and receiver of a message across pub/sub sessions).\n        //\n        if (!call.options) {\n\n            call.options = { correlationId: randomUUID() };\n\n        } else if (call.options && !call.options.correlationId) {\n\n            call.options.correlationId = randomUUID();\n\n        }\n\n        //\n        // Acquire the connection reference safely.\n        //\n        this.reference$.subscribe(reference => {\n\n            this.logger.debug(`Sending RPC call to correlationId #${ chalk.yellowBright(call.options.correlationId) } for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n            //\n            // Kick off the consumer first.\n            //\n            reference.channel.consume(call.queue, message => {\n\n                console.log(`a: ${ message.content.toString() }`);\n\n                subject$.next(new AMQPMessage<T>(message));\n\n            }, call.options);\n\n            //\n            // Publish the RPC message.\n            //\n            reference.channel.sendToQueue(call.queue, call.message, call.options);\n\n            const timeout = setTimeout(() => {\n\n                console.log('timed out');\n\n            }, call.timeout);\n\n        });\n\n        return subject$;\n\n    }\n\n    public rpcConsume<T>(queue: string, callback: Function, options?: Consume): Subject<T> {\n\n        const subject$: Subject<T> = new Subject();\n\n        this.reference$.subscribe(async reference => {\n\n            this.logger.debug(`RPC consuming queue \"${ chalk.yellowBright(queue) }\" for connection \"${ chalk.yellowBright(this.config.name) }\"..`, AMQPLogEmoji.SUCCESS, 'CONNECTION MANAGER');\n\n            await reference.channel.assertQueue(queue, { autoDelete: true });\n\n            reference.channel.consume(queue, message => {\n\n                console.log(message);\n\n                const reply = callback(message);\n\n\n                console.log(reply);\n                reference.channel.sendToQueue(queue, Buffer.from(reply), {\n\n                    correlationId: message.properties.correlationId,\n                    replyTo: message.properties.replyTo\n\n                });\n\n            }, options);\n\n        });\n\n        return subject$;\n\n    }\n\n    public addSubscription(subscription: Subscription): void {\n\n        this.subscriptions.push(subscription);\n\n\n    }\n\n    public cancelActiveSubscriptions(): void {\n\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n\n    }\n\n}\n"]}