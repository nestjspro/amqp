{"version":3,"sources":["/Users/matthewdavis/workspace/nestjspro/modules/amqp/lib/src/queueing/AMQPQueue.ts"],"names":[],"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","sourcesContent":["import { AMQPConnection } from '../AMQPConnection';\nimport { Subject, Subscription, Observable, ReplaySubject } from 'rxjs';\nimport { AMQPConnectionStatus } from '../AMQPConnectionStatus';\nimport { AMQPQueueMessage } from './AMQPQueueMessage';\nimport { AMQPLogger } from '../logging/AMQPLogger';\nimport * as chalk from 'chalk';\nimport { AMQPLogEmoji } from '../logging/AMQPLogEmoji';\n\nexport class AMQPQueue {\n\n    private queue$: ReplaySubject<AMQPQueueMessage> = new ReplaySubject();\n    private connection: AMQPConnection;\n    private subscription: Subscription;\n    private readonly logger: AMQPLogger;\n\n    /**\n     * Length of the pending message queue.\n     *\n     * @type {number}\n     */\n    public length: number = 0;\n\n    /**\n     * Maximum number of messages to allow in queue at a time.\n     *\n     * @type {number}\n     */\n    public max: number;\n\n    public subscriptions: Subscription = new Subscription();\n\n    /**\n     * Queue instantiator.\n     *\n     * @param {AMQPConnection} connection Connection reference.\n     * @param {number} max Maximum number of messages to allow in queue at a time.\n     */\n    public constructor(connection: AMQPConnection, max?: number) {\n\n        this.logger = connection.logger;\n        this.connection = connection;\n        this.max = max;\n\n        //\n        // Listen for connection status changes.\n        //\n        this.connection.status$.subscribe(status => {\n\n            //\n            // If we're now connected, drain the queue, otherwise stop listening.\n            //\n            if (status === AMQPConnectionStatus.CONNECTED) {\n\n                this.logger.debug(`${ chalk.greenBright('Connection established') }, queue is ready for drain operations for the connection ${ chalk.yellowBright(this.connection.config.name) }!`, AMQPLogEmoji.SUCCESS, 'QUEUE MANAGER');\n\n                //\n                // Start draining the queue and listening for\n                // additional messages.\n                //\n                this.subscriptions.add(this.queue$.subscribe(messages => this.drain(messages)));\n\n            } else {\n\n                this.subscriptions.unsubscribe();\n\n                this.logger.debug(`${ chalk.greenBright('Connection established') }, queue has stopped draining operations for the connection ${ chalk.yellowBright(this.connection.config.name) }!`, AMQPLogEmoji.DISCONNECT, 'QUEUE MANAGER');\n\n            }\n\n        });\n\n    }\n\n    /**\n     * Subscribes to the queue$ {Subject} and publishes the pending message.\n     *\n     * @param {AMQPQueueMessage} message\n     */\n    public drain(message: AMQPQueueMessage): void {\n\n        this.subscriptions.add(this.connection.reference$.subscribe(reference => {\n\n            this.logger.debug(`${ chalk.redBright('Draining message') } to ${ chalk.yellowBright(message.exchange) }(#${ chalk.blueBright(message.routingKey) }) for the connection \"${ chalk.yellowBright(this.connection.config.name) }\"`, AMQPLogEmoji.DOWN, 'QUEUE MANAGER');\n\n            if (this.connection.status === AMQPConnectionStatus.CONNECTED) {\n\n                // const result = reference.channel.publish(message.exchange.toString(), message.routingKey.toString(), message.message, message.options);\n\n                this.length--;\n\n                //\n                // If the caller passed in an observable, call it to\n                // notify that the message has been published.\n                //\n                // This is beneficial in the event that there is a\n                // long backlog of messages due to connectivity issue(s).\n                //\n                if (message.published$) {\n\n                    // message.published$.next(result);\n\n                }\n\n            }\n\n        }));\n\n    }\n\n    /**\n     * Publish a new message the queue.\n     *\n     * @param {AMQPQueueMessage} message\n     */\n    public publish(message: AMQPQueueMessage): void {\n\n        this.logger.debug(`${ chalk.greenBright('Publishing message') } to ${ chalk.yellowBright(message.exchange) }(#${ chalk.blueBright(message.routingKey) }) for the connection \"${ chalk.yellowBright(this.connection.config.name) }\" (${ this.connection.status === AMQPConnectionStatus.CONNECTED ? chalk.green(this.connection.status) : chalk.red(this.connection.status) })`, AMQPLogEmoji.INBOX, 'QUEUE MANAGER');\n\n        this.queue$.next(message);\n\n        this.length++;\n\n    }\n\n    /**\n     * Helper method to wrap .publish() via arguments.\n     *\n     * @param {string} exchange Exchange to publish message through.\n     * @param {string} routingKey Routing key to publish message under.\n     * @param {Object} message Object that gets serialized into a json string.\n     * @param {Subject<boolean>} published$ Emitted when the messages has been published from the queue.\n     *\n     * @return {Subject<boolean>} Observable that is .next'ed upon completion with the boolean response from amqplib.\n     */\n    public publishJSON(exchange: string | number, routingKey: string | number, message: Object, published$: Subject<boolean> = new Subject()): Observable<boolean> {\n\n        this.publish({\n\n            exchange,\n            routingKey,\n            message: Buffer.from(JSON.stringify(message)),\n            published$\n\n        });\n\n        return published$;\n\n    }\n\n}\n"]}