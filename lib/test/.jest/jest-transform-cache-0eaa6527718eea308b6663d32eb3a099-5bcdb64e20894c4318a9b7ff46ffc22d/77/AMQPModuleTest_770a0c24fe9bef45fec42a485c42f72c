8434aee5594a382f91f256aa726153a4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dist_1 = require("../dist");
const testing_1 = require("@nestjs/testing");
jest.setTimeout(15000);
describe('AMQPModule Test', () => {
    let app;
    let amqpService;
    test('asdf', async () => {
        const module = await testing_1.Test.createTestingModule({
            imports: [
                dist_1.AMQPModule.forRoot({
                    logLevel: dist_1.AMQPLogLevel.ERROR,
                    connections: [
                        {
                            name: 'one',
                            url: 'amqp://rabbitmq:agaeq14@localhost:5672',
                            exchange: {
                                name: 'test-1',
                                type: 'topic',
                                options: {
                                    durable: true
                                }
                            },
                            queues: [
                                {
                                    name: '1',
                                    routingKey: '111',
                                    createBindings: true,
                                    options: {
                                        durable: false
                                    }
                                }
                            ]
                        }, {
                            name: 'two',
                            url: 'amqp://rabbitmq:agaeq14@localhost:5672',
                            exchange: {
                                name: 'test-2',
                                type: 'topic',
                                options: {
                                    durable: true
                                }
                            },
                            queues: [
                                {
                                    name: '2',
                                    routingKey: '222',
                                    createBindings: true,
                                    options: {
                                        durable: false
                                    }
                                }
                            ]
                        }
                    ]
                })
            ]
        }).compile();
        app = module.createNestApplication();
        await app.init();
        amqpService = module.get(dist_1.AMQPService);
        amqpService.getConnection('two').subscribe(connection => {
            expect(connection.status).toEqual(dist_1.AMQPConnectionStatus.DISCONNECTED);
        });
        return new Promise(resolve => {
            expect(1).toEqual(1);
            resolve();
        });
        //
        // service.connections[ 0 ].reference$.subscribe(reference => {
        //     console.log(3);
        //     console.log(reference);
        //
        // });
        // console.log(4);
        // console.log(service.connections);
        // await publisher.connect();
        //
        // const channel = await publisher.amqp.createChannel();
        // console.log(channel);
        // console.log(await channel.assertExchange('test-2', 'topic'));
        //
        // await app.close();
    });
    test('Publish Message', async () => {
        amqpService.getConnection().subscribe(connection => {
            connection.queue.publish({ exchange: 'test-1', message: Buffer.from('a'), routingKey: '1' });
        });
    });
    afterAll(async () => {
        amqpService.disconnect();
        await app.close();
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, 1000);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,